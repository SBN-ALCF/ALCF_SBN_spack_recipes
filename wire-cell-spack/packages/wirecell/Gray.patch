diff --git a/sigproc/inc/WireCellSigProc/OmnibusSigProc.h b/sigproc/inc/WireCellSigProc/OmnibusSigProc.h
index 6280a8a9..807a7672 100644
--- a/sigproc/inc/WireCellSigProc/OmnibusSigProc.h
+++ b/sigproc/inc/WireCellSigProc/OmnibusSigProc.h
@@ -65,7 +65,7 @@ namespace WireCell {
             // save Multi-Plane ROI into the out frame (set use_roi_debug_mode=true)
             // mp_rois: osp-chid, start -> start, end
             void save_mproi(ITrace::vector& itraces, IFrame::trace_list_t& indices, int plane,
-                            std::multimap<std::pair<int, int>, std::pair<int, int> > mp_rois);
+                            const std::multimap<std::pair<int, int>, std::pair<int, int> > mp_rois);
 
             void save_ext_roi(ITrace::vector& itraces, IFrame::trace_list_t& indices, int plane,
                               std::vector<std::list<SignalROI*> >& roi_channel_list);
diff --git a/sigproc/src/OmnibusSigProc.cxx b/sigproc/src/OmnibusSigProc.cxx
index f11959b6..c7b1a3bb 100644
--- a/sigproc/src/OmnibusSigProc.cxx
+++ b/sigproc/src/OmnibusSigProc.cxx
@@ -642,19 +642,21 @@ void OmnibusSigProc::save_ext_roi(ITrace::vector& itraces, IFrame::trace_list_t&
 // save Multi-Plane ROI into the out frame (set use_roi_debug_mode=true)
 // mp_rois: osp-chid, start -> start, end
 void OmnibusSigProc::save_mproi(ITrace::vector& itraces, IFrame::trace_list_t& indices, int plane,
-                                std::multimap<std::pair<int, int>, std::pair<int, int>> mp_rois)
+                                const std::multimap<std::pair<int, int>, std::pair<int, int>> mp_rois)
 {
+    // Process the mp_roi map. Turn it into a map of channel -> List of (start, end). Allows much more efficient access
+    std::map<int, std::vector<std::pair<int, int>>> channel_to_mproi;
+    for (auto signal_roi : mp_rois) channel_to_mproi[signal_roi.first.first].push_back(signal_roi.second);
+
     // reuse this temporary vector to hold charge for a channel.
     ITrace::ChargeSequence charge(m_nticks, 0.0);
 
     for (auto och : m_channel_range[plane]) {  // ordered by osp channel
 
         std::fill(charge.begin(), charge.end(), 0);
-
-        for (auto signal_roi : mp_rois) {
-            if (och.channel != signal_roi.first.first) continue;
-            int start = signal_roi.second.first;
-            int end = signal_roi.second.second;
+        for (auto signal_roi : channel_to_mproi[och.channel]) {
+            int start = signal_roi.first;
+            int end = signal_roi.second;
             // end is should be included but not larger than m_nticks
             for (int i = start; i <= end && i < m_nticks; i++) {
                 charge.at(i) = 4000.;  // arbitary constant number for ROI display
@@ -971,7 +973,7 @@ void OmnibusSigProc::decon_2D_init(int plane)
             const int irow = och.wire + m_pad_nwires[plane];
             for (int icol = 0; icol != m_c_data[plane].cols(); icol++) {
                 const auto four = ch_elec.at(icol);
-                if (std::abs(four) != 0) {
+                if (std::norm(four) != 0) {
                     m_c_data[plane](irow, icol) *= elec.at(icol) / four;
                 }
                 else {
@@ -1007,7 +1009,7 @@ void OmnibusSigProc::decon_2D_init(int plane)
     wire_filter_wf = ncr1->filter_waveform(m_c_data[plane].rows());
     for (int irow = 0; irow < m_c_data[plane].rows(); ++irow) {
         for (int icol = 0; icol < m_c_data[plane].cols(); ++icol) {
-            float val = abs(m_c_data[plane](irow, icol));
+            float val = sqrt(norm(m_c_data[plane](irow, icol)));
             if (std::isnan(val)) {
                 m_c_data[plane](irow, icol) = -0.0;
             }
