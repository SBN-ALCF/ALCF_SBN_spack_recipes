diff --git a/packages/artg4tk/package.py b/packages/artg4tk/package.py
index a4ea4e7..df1e917 100644
--- a/packages/artg4tk/package.py
+++ b/packages/artg4tk/package.py
@@ -13,7 +13,7 @@ class Artg4tk(CMakePackage):
     git = "https://github.com/art-framework-suite/art-g4tk.git"
     url = "https://github.com/art-framework-suite/art-g4tk/archive/refs/tags/v11_00_01.tar.gz"
 
-    # version('10.04.00', sha256='44a1e12425ff2ebe90f7482ad2b10cbde873477815f81707677eb2ad14d3cef4')
+    version('10.04.00', sha256='44a1e12425ff2ebe90f7482ad2b10cbde873477815f81707677eb2ad14d3cef4')
     version("10.04.00", tag="v10_04_00", get_full_repo=True)
     version("c06a0ed7a0", commit="c06a0ed7a0a543cba5c23fc588f7dd6dcb6609e2", get_full_repo=True)
     version("develop", branch="develop", get_full_repo=True)
@@ -44,6 +44,7 @@ class Artg4tk(CMakePackage):
     )
 
     patch("cetmodules2-c06a0ed7a0a543cba5c23fc588f7dd6dcb6609e2.patch", when="@c06a0ed7a0")
+    patch("override.patch", when="@11.00.01")
     # patch('mwm.patch')
     depends_on("cetmodules", type="build")
     depends_on("cetbuildtools", type="build")
diff --git a/packages/castxml/package.py b/packages/castxml/package.py
index d6438f0..7966358 100644
--- a/packages/castxml/package.py
+++ b/packages/castxml/package.py
@@ -29,6 +29,7 @@ class Castxml(CMakePackage):
     homepage = "https://github.com/CastXML/CastXML"
     url = "https://github.com/CastXML/CastXML/archive/v0.2.0.tar.gz"
 
+    version("0.6.2", sha256="9bb108de1b3348a257be5b08a9f8418f89fdcd4af2e6ee271d68b0203ac75d5e")
     version("0.5.1", sha256="a7b40b1530585672f9cf5d7a6b6dd29f20c06cd5edf34ef34c89a184a4d1a006")
     version("0.3.6", sha256="e51a26704864c89036a0a69d9f29c2a522a9fa09c1009e8b8169a26480bb2993")
     version("0.3.5", sha256="397044081363da0f3e50aff995f71b68aedd194d034caa50869224a4e6784c3b")
@@ -40,6 +41,14 @@ class Castxml(CMakePackage):
     version("0.2.1", sha256="1f01149af1c58e59500e24cade8033e98a16001aa6a0f666643bbc9e303a82b0")
     version("0.2.0", sha256="626c395d0d3c777b5a1582cdfc4d33d142acfb12204ebe251535209126705ec1")
 
+    variant(
+        "cxxstd",
+        default="17",
+        values=("14", "17", "20"),
+        multi=False,
+        description="Use the specified C++ standard when building.",
+    )
+
     # FIXME: Add dependencies if required.
     depends_on('llvm')
 
@@ -47,5 +56,9 @@ class Castxml(CMakePackage):
         # FIXME: Add arguments other than
         # FIXME: CMAKE_INSTALL_PREFIX and CMAKE_BUILD_TYPE
         # FIXME: If not needed delete this function
-        args = []
+        print(self.spec.variants)
+        args = [
+            "-DCMAKE_CXX_STANDARD={0}".format(self.spec.variants["cxxstd"].value),
+            "-DCLANG_RESOURCE_DIR=/lus/grand/projects/neutrinoGPU/software/NateDev/fermi-spack-2/spack/opt/spack/linux-sles15-zen3/gcc-12.3.0/llvm-17.0.6-gdkjozkb2rvmeqic6q5iyhwmwaxyw3xk/lib/clang/17/"
+        ]
         return args
diff --git a/packages/genie-xsec/package.py b/packages/genie-xsec/package.py
index fa45764..b5bfdcd 100644
--- a/packages/genie-xsec/package.py
+++ b/packages/genie-xsec/package.py
@@ -11,76 +11,123 @@ from spack import *
 class GenieXsec(Package):
     """Data files used by genie."""
 
-    homepage = "https://www.example.com"
-    url = "file://" + os.path.dirname(__file__) + "/../../config/junk.xml"
-    version(
-        "2.12.10", "2cae8b754a9f824ddd27964d11732941fd88f52f0880d7f685017caba7fea6b7", expand=False
-    )
+    url = "https://scisoft.fnal.gov/scisoft/packages/genie_xsec/v3_04_00/genie_xsec-3.04.00-noarch-G1810a0211a-k250-e1000.tar.bz2"
+    version("3_04_00", sha256="fb4dc9badd1771c92fabbf818b33544006e8b60c7fb0f33d5288a66d93bd19ea")
 
+    # xsec_name values are designed to line up with the ups setup command
+    # when setting the environment variable, we change to match typical
+    # genie tune format
     variant(
         "xsec_name",
-        default="DefaultPlusMECWithNC",
+        default="AR2320i00000-k250-e1000",
         multi=False,
         values=(
-            "AltPion",
-            "DefaultPlusMECWithNC",
-            "DefaultPlusValenciaMEC",
-            "EffSFTEM",
-            "LocalFGNievesQEAndMEC",
-            "ValenciaQEBergerSehgalCOHRES",
+            "AR2320i00000-k250-e1000",
+            "G1801a00000-k250-e1000",
+            "G1802a00000-k250-e1000",
+            "G1810a0211a-k250-e1000",
+            "G1810a0211b-k250-e1000",
+            "G2111a00000-k250-e1000",
+            "GDNu2001a00000-k120-e200",
+            "N1810j0211a-k250-e1000"
         ),
-        description="Name of genie xsec set to install.",
+        description="Name of genie xsec tune set to install.",
     )
-
     urlbase = (
-        "https://scisoft.fnal.gov/scisoft/packages/genie_xsec/v2_12_10/genie_xsec-2.12.10-noarch-"
+         "https://scisoft.fnal.gov/scisoft/packages/genie_xsec/v3_04_00/genie_xsec-3.04.00-noarch-"
     )
     resource(
-        name="AltPion",
-        placement="AltPion",
-        when="xsec_name=AltPion",
-        url=urlbase + "AltPion.tar.bz2",
-        sha256="49c4c5332c96edc4147e8cacd5b68e8dd89737e205741a21bc75a5ba18b967c4",
-    )
+        name="AR2320i00000-k250-e1000",
+        placement="AR2320i00000-k250-e1000",
+        when="xsec_name=AR2320i00000-k250-e1000",
+        url=urlbase + "AR2320i00000-k250-e1000.tar.bz2",
+        sha256="13cc9d740c170af9033623049162eeff0fb0b68156122d380aa3262e92e9f61f",
+        )
+
     resource(
-        name="DefaultPlusMECWithNC",
-        placement="DefaultPlusMECWithNC",
-        when="xsec_name=DefaultPlusMECWithNC",
-        url=urlbase + "DefaultPlusMECWithNC.tar.bz2",
-        sha256="7c57caa96c319ad8007253e2a81c6ffcc4dcc6d0923dabbf7b8938d8363ac621",
-    )
+        name="G1801a00000-k250-e1000",
+        placement="G1801a00000-k250-e1000",
+        when="xsec_name=G1801a00000-k250-e1000",
+        url=urlbase + "G1801a00000-k250-e1000.tar.bz2",
+        sha256="f222ff56360c9c221e8f793a9c09ddbe6578dbbaa9031b3b3a49cb5ec186595d",
+        )
+
     resource(
-        name="DefaultPlusValenciaMEC",
-        placement="DefaultPlusValenciaMEC",
-        when="xsec_name=DefaultPlusValenciaMEC",
-        url=urlbase + "DefaultPlusValenciaMEC.tar.bz2",
-        sha256="fe1b584e7014bba6c4cba5646e1031f344e9efbf799a2aa26b706e28c40a4481",
-    )
+        name="G1802a00000-k250-e1000",
+        placement="G1802a00000-k250-e1000",
+        when="xsec_name=G1802a00000-k250-e1000",
+        url=urlbase + "G1802a00000-k250-e1000.tar.bz2",
+        sha256="d7189bd6c3933b3017c83fafddb84d57b48414632b577835e49babec8537ab6e",
+        )
+
     resource(
-        name="EffSFTEM",
-        placement="EffSFTEM",
-        when="xsec_name=EffSFTEM",
-        url=urlbase + "EffSFTEM.tar.bz2",
-        sha256="b6365f1a150b90b79788f51b084a1dce7432d8ba10b7faa03ade3f6d558c82f6",
-    )
+        name="G1810a0211a-k250-e1000",
+        placement="G1810a0211a-k250-e1000",
+        when="xsec_name=G1810a0211a-k250-e1000",
+        url=urlbase + "G1810a0211a-k250-e1000.tar.bz2",
+        sha256="fb4dc9badd1771c92fabbf818b33544006e8b60c7fb0f33d5288a66d93bd19ea",
+        )
+
     resource(
-        name="LocalFGNievesQEAndMEC",
-        placement="LocalFGNievesQEAndMEC",
-        when="xsec_name=LocalFGNievesQEAndMEC",
-        url=urlbase + "LocalFGNievesQEAndMEC.tar.bz2",
-        sha256="5f02d7efa46ef42052834d80b6923b41e502994daaf6037dad9793799ad4b346",
-    )
+        name="G1810a0211b-k250-e1000",
+        placement="G1810a0211b-k250-e1000",
+        when="xsec_name=G1810a0211b-k250-e1000",
+        url=urlbase + "G1810a0211b-k250-e1000.tar.bz2",
+        sha256="a1031e49ac8ac426074f247d91b2c886edaf7c4fef13993fe69aad92ad698c34",
+        )
+
     resource(
-        name="ValenciaQEBergerSehgalCOHRES",
-        placement="ValenciaQEBergerSehgalCOHRES",
-        when="xsec_name=ValenciaQEBergerSehgalCOHRES",
-        url=urlbase + "ValenciaQEBergerSehgalCOHRES.tar.bz2",
-        sha256="3e7c117777cb0da6232df1e1fe481fdb2afbfe55639b0d7b4ddf8027954ed1fa",
-    )
+        name="G2111a00000-k250-e1000",
+        placement="G2111a00000-k250-e1000",
+        when="xsec_name=G2111a00000-k250-e1000",
+        url=urlbase + "G2111a00000-k250-e1000.tar.bz2",
+        sha256="ae159887772a54891fc4bddb189ab108d74c4a48db68c13ed7166524e8797590",
+        )
+
+    resource(
+        name="GDNu2001a00000-k120-e200",
+        placement="GDNu2001a00000-k120-e200",
+        when="xsec_name=GDNu2001a00000-k120-e200",
+        url=urlbase + "GDNu2001a00000-k120-e200.tar.bz2",
+        sha256="69146aacc6c55bdc5c519e917e48ea005d160824bf960d17734e9c7c6d85b6cb",
+        )
+
+    resource(
+        name="N1810j0211a-k250-e1000",
+        placement="N1810j0211a-k250-e1000",
+        when="xsec_name=N1810j0211a-k250-e1000",
+        url=urlbase + "N1810j0211a-k250-e1000.tar.bz2",
+        sha256="79e7ecd8d0dc577efb525831b90eb2f650c0cdd7fe5cd17e3ea610a686248e33",
+        )
 
     def install(self, spec, prefix):
         val = spec.variants["xsec_name"].value
+        comb_str = val.split(':')[0].split('-')[0]
+        tune_str = comb_str[:3]+"_"+comb_str[3:6]+"_"+comb_str[6:8]+"_"+comb_str[8:]
+
         install_tree(
             "{0}/{2}/v{1}/NULL/{2}".format(self.stage.source_path, self.version.underscored, val),
-            "{0}/{1}".format(prefix, val),
+            "{0}/v{1}/NULL/{2}".format(prefix, self.version.underscored, val),
         )
+
+    def setup_run_environment(self, run_env):
+
+        val = self.spec['genie-xsec'].variants['xsec_name'].value
+        data_str = "{0}/v{1}/NULL/{2}/data".format(self.spec['genie-xsec'].prefix, self.version.underscored, val)
+        raw_str = self.spec['genie-xsec'].variants['xsec_name'].value
+        comb_str = raw_str.split(':')[0].split('-')[0]
+        tune_str = comb_str[:-8]+"_"+comb_str[-8:-5]+"_"+comb_str[-5:-3]+"_"+comb_str[-3:] 
+        run_env.unset("GENIEXSECPATH")
+        run_env.set("GENIEXSECPATH", data_str)
+        run_env.unset("GENIEXSECFILE")
+        run_env.set("GENIEXSECFILE", data_str+"/gxspl-NUsmall.xml")
+        run_env.unset("GXMLPATH")
+        run_env.set("GXMLPATH", data_str)
+        run_env.unset("GENIE_XSEC_TUNE")
+        run_env.set("GENIE_XSEC_TUNE", tune_str)
+        run_env.unset("GENIE_XSEC_GENLIST")
+        run_env.set("GENIE_XSEC_GENLIST", "Default")
+        run_env.unset("GENIE_XSEC_KNOTS")
+        run_env.set("GENIE_XSEC_KNOTS", "250")
+        run_env.unset("GENIE_XSEC_EMAX")
+        run_env.set("GENIE_XSEC_EMAX", "1000.0")
diff --git a/packages/genie/package.py b/packages/genie/package.py
index f07cb3d..a8fd4bd 100644
--- a/packages/genie/package.py
+++ b/packages/genie/package.py
@@ -25,6 +25,7 @@ class Genie(AutotoolsPackage):
             version.underscored
         )
 
+    version("3.04.02", sha256="c5935aea86d2ba9897ab55bb581622c561575957d19e572691d3bc0833ed9512")
     version("3.04.00", sha256="72cf8a119cc59d03763b11afad1a82c0974a06677bf1c154b7c2a90d9f1529c1")
     version("3.00.06", sha256="ab56ea85d0c1d09029254365bfe75a1427effa717389753b9e0c1b6c2eaa5eaf")
     version("3.00.04", sha256="53f034618fef9f7f0e17d1c4ed72743e4bba590e824b795177a1a8a8486c861e")
@@ -81,10 +82,14 @@ class Genie(AutotoolsPackage):
     patch("patch/sles-cnl.patch", when="platform=cray")
     patch("patch/root_subdir.patch")
 
-    patch("patch/GENIE-Generator.patch", when="@3.04.00")
-    patch("patch/GENIE-Reweight.patch", when="@3.04.00", level=0)
+    patch("patch/GENIE-Generator.patch", when="@3.04.02")
+    patch("patch/GENIE-Reweight.patch", when="@3.04.02", level=0)
 
-    @when("os=almalinux9")
+    # @when("os=almalinux9")
+    # def patch(self):
+        # filter_file(r'-lnsl','','src/make/Make.include')
+
+    # @when("os=almalinux9")
     def patch(self):
         filter_file(r'-lnsl','','src/make/Make.include')
 
@@ -174,6 +179,9 @@ class Genie(AutotoolsPackage):
         mkdirp(prefix.lib64)
         mkdirp(prefix.include)
         mkdirp(prefix.src)
+        mkdirp(prefix.data)
+        mkdirp(prefix.config)
+        mkdirp(prefix.data)
 
         with working_dir(self.build_directory):
             make("install")
@@ -188,8 +196,13 @@ class Genie(AutotoolsPackage):
             os.path.join(self.prefix, "src", "scripts"),
         )
         src_make_dir = os.path.join(self.prefix, "src", "make", "")
+        config_dir = os.path.join(self.prefix, "config", "")
+        data_dir = os.path.join(self.prefix, "data", "")
         # filesystem.mkdirp(src_make_dir)
         filesystem.install_tree(os.path.join(self.stage.source_path, "src", "make"), src_make_dir)
+        # Below added for tune functionality and PDG library access
+        filesystem.install_tree(os.path.join(self.stage.source_path, "config"), config_dir)
+        filesystem.install_tree(os.path.join(self.stage.source_path, "data"), data_dir)
 
     def setup_build_environment(self, spack_env):
         spack_env.set("ROOT_INCLUDE_PATH", os.path.join(self.stage.source_path, "src"))
diff --git a/packages/genie/patch/GENIE-Generator.patch b/packages/genie/patch/GENIE-Generator.patch
index 49de571..8e0b64f 100644
--- a/packages/genie/patch/GENIE-Generator.patch
+++ b/packages/genie/patch/GENIE-Generator.patch
@@ -29,3 +29,56 @@ diff -Naur GENIE-Generator/src/Physics/NuclearDeExcitation/NucDeExcitationSim.cx
      double s12Elv[ns12] = {0.0005, 0.0007, 0.0017, 0.0021, 0.0033, 0.0035, 0.0047, 0.0063};
      //double s12Plv[ns12] = {0.21, 0.295, 0.14, 0.26, 0.14, 0.2, 0.03, 0.03};
      // the above multiply by 0.2
+diff --git a/src/Framework/EventGen/GMCJDriver.cxx b/src/Framework/EventGen/GMCJDriver.cxx
+index aa7d44a3b..698d3e8d7 100644
+--- a/src/Framework/EventGen/GMCJDriver.cxx
++++ b/src/Framework/EventGen/GMCJDriver.cxx
+@@ -83,11 +83,13 @@ void GMCJDriver::SetUnphysEventMask(const TBits & mask)
+ void GMCJDriver::UseFluxDriver(GFluxI * flux_driver)
+ {
+   fFluxDriver = flux_driver;
++  std::cout << "fFluxDriver: " << fFluxDriver<< "\n";
+ }
+ //___________________________________________________________________________
+ void GMCJDriver::UseGeomAnalyzer(GeomAnalyzerI * geom_analyzer)
+ {
+   fGeomAnalyzer = geom_analyzer;
++  std::cout << "fGeomAnalyzer: " << fGeomAnalyzer << "\n";
+ }
+ //___________________________________________________________________________
+ void GMCJDriver::UseSplines(bool useLogE)
+@@ -105,6 +107,8 @@ bool GMCJDriver::UseMaxPathLengths(string xml_filename)
+ 
+   fMaxPlXmlFilename = xml_filename;
+ 
++  std::cout << "xml_filename: " << xml_filename << "\n";
++
+   bool is_accessible = !(gSystem->AccessPathName(fMaxPlXmlFilename.c_str()));
+ 
+   if ( is_accessible ) fUseExtMaxPl = true;
+@@ -721,6 +725,7 @@ void GMCJDriver::ComputeProbScales(void)
+   // loop over all neutrino types generated by the flux driver
+   for(nuiter = fNuList.begin(); nuiter != fNuList.end(); ++nuiter) {
+     int neutrino_pdgc = *nuiter;
++    std::cout << "neutrino_pdgc: " << neutrino_pdgc << "\n";
+     TH1D * pmax_hst = new TH1D("pmax_hst",
+              "max interaction probability vs E | geom",fPmaxNbins,ebins);
+     pmax_hst->SetDirectory(0);
+@@ -729,6 +734,8 @@ void GMCJDriver::ComputeProbScales(void)
+     for(int ie = 1; ie <= pmax_hst->GetNbinsX(); ie++) {
+       double EvLow  = pmax_hst->GetBinCenter(ie) - 0.5*pmax_hst->GetBinWidth(ie);
+       double EvHigh = pmax_hst->GetBinCenter(ie) + 0.5*pmax_hst->GetBinWidth(ie);
++      std::cout << "EvLow: " << EvLow << "\n";
++      std::cout << "EvHigh: " << EvHigh << "\n";
+       //double Ev = pmax_hst->GetBinCenter(ie);
+ 
+        // loop over targets in input geometry, form initial state and compute
+@@ -756,6 +763,8 @@ void GMCJDriver::ComputeProbScales(void)
+          int A = pdg::IonPdgCodeToA(target_pdgc);
+          double pmaxLow  = this->InteractionProbability(sxsecLow, plmax, A);
+          double pmaxHigh = this->InteractionProbability(sxsecHigh, plmax, A);
++         std::cout << "Low: " << pmaxLow << "\n";
++         std::cout << "High: " << pmaxHigh << "\n";
+ 
+         double pmax = pmaxHigh;
+         if ( pmaxLow > pmaxHigh){
diff --git a/packages/h5cpp/package.py b/packages/h5cpp/package.py
deleted file mode 100644
index 6ff4ca8..0000000
--- a/packages/h5cpp/package.py
+++ /dev/null
@@ -1,41 +0,0 @@
-# Copyright 2013-2019 Lawrence Livermore National Security, LLC and other
-# Spack Project Developers. See the top-level COPYRIGHT file for details.
-#
-# SPDX-License-Identifier: (Apache-2.0 OR MIT)
-
-import re
-
-from spack import *
-
-
-class H5cpp(Package):
-    """Hierarchical Data Format C++ templates for Serial and Paralell HDF5"""
-
-    homepage = "https://h5cpp.org/"
-    #url = "https://github.com/steven-varga/h5cpp/archive/refs/tags/v1.10.4-6.tar.gz"
-    git = "https://github.com/steven-varga/h5cpp.git"
-
-    version("1.10.4.6", tag="v1.10.4-6")
-    version("1.10.4.5", tag="v1.10.4-5")
-    #version("1.10.4.6", sha256="4fbc8e777dc78a37ec2fe8c7b6a47114080ffe587f083e83a2046b5e794aef93")
-    #version("1.10.4.5", sha256="661ccc4d76e081afc73df71ef11d027837d92dd1089185f3650afcaec9d418ec")
-
-    depends_on("cmake@3.10:", type="build")
-    depends_on("hdf5") # for examples(?)
-    depends_on("fmt")
-
-    def url_for_version(self, version):
-        return "https://github.com/steven-varga/h5cpp/archive/refs/tags/v{0}.tar.gz".format(
-            re.sub(r"\.([0-9])$", r"-\1", str(version))
-        )
-
-    def install(self, spec, prefix):
-        cmake(
-           '-DHDF5_LIBRARIES=%s' % self.spec['hdf5'].prefix.lib,
-           '-DHDF5_INCLUDE_DIRS=%s' % self.spec['hdf5'].prefix.include,
-           '-DCMAKE_INSTALL_PREFIX=%s' % prefix,
-           '-DCMAKE_INSTALL_DATADIR=examples',
-           '-DCMAKE_INSTALL_LIBDIR=lib',
-           '.'
-        )
-        make('install')
diff --git a/packages/jsonnet/package.py b/packages/jsonnet/package.py
index 5664bd9..3403fd2 100644
--- a/packages/jsonnet/package.py
+++ b/packages/jsonnet/package.py
@@ -52,12 +52,9 @@ class Jsonnet(Package):
         install("include/libjsonnet.h", prefix.include)
         install("include/libjsonnet++.h", prefix.include)
         libs = find(prefix.lib, "libjsonnet*")
-        for lib in libs:
-            try:
-                symlink(lib, prefix.lib + "%s.0" % lib)
-            except FileNotFoundError:
-                pass
-
+        for single_lib in libs:
+            symlink(single_lib, prefix.lib +"/%s.0" % os.path.basename(single_lib))
+        
     def setup_build_environment(self, spack_env):
         for cflag in ("-O3", "-DNDEBUG", "-g", "-fno-omit-frame-pointer"):
             spack_env.append_flags("CFLAGS_LOCAL", cflag)
diff --git a/packages/lhapdf/package.py b/packages/lhapdf/package.py
index 674d109..34dc18f 100644
--- a/packages/lhapdf/package.py
+++ b/packages/lhapdf/package.py
@@ -51,7 +51,9 @@ class Lhapdf(AutotoolsPackage):
     )
 
     depends_on("pdfsets")
-
+    depends_on("python")
+    depends_on("gettext",type="build")
+    
     def configure_args(self):
         return ("--enable-low-memory", "--disable-pyext", "--disable-octave")
 
diff --git a/packages/sbnanaobj/package.py b/packages/sbnanaobj/package.py
index 4c08495..aafff32 100644
--- a/packages/sbnanaobj/package.py
+++ b/packages/sbnanaobj/package.py
@@ -29,6 +29,7 @@ class Sbnanaobj(CMakePackage):
     homepage = "https://www.example.com"
     url = "https://github.com/SBNSoftware/sbnanaobj/archive/refs/tags/v09_17_04.tar.gz"
 
+    version("09.23.02", sha256="be2ea1ab0f6e99e30608b41b851694d7e14e1d30abbd66f18d11956c78700bbf")
     version(
         "09.17.06.06", sha256="e943ca9411282fdd1d3d8b635b706d777722857426488188b39d2bb6c9cd3947"
     )
@@ -47,6 +48,7 @@ class Sbnanaobj(CMakePackage):
         description="Use the specified C++ standard when building.",
     )
 
+    patch("v09_23_02.patch", when="@09.23.02")
     patch("v09_17_06_06.patch", when="@09.17.06.06")
     patch("v09_17_06_02.patch", when="@09.17.06.02")
     patch("v09_17_06_01.patch", when="@09.17.06.01")
diff --git a/packages/sbncode/package.py b/packages/sbncode/package.py
index 442903b..3439e42 100644
--- a/packages/sbncode/package.py
+++ b/packages/sbncode/package.py
@@ -32,10 +32,15 @@ class Sbncode(CMakePackage):
 
     homepage = "https://cdcvs.fnal.gov/redmine/projects/sbncode"
     url = "https://github.com/SBNSoftware/sbncode/archive/refs/tags/v09_35_01.tar.gz"
+    git = "https://github.com/SBNSoftware/sbncode.git"
     git_base = "https://github.com/SBNSoftware/sbncode.git"
     list_url = "https://api.github.com/repos/SBNSoftware/sbncode/tags"
 
     version("develop", branch="develop", git=git_base, get_full_repo=True)
+    version("09.91.01", commit="f3da8986c43f9d9d7e674b9ab7866da314db5745", submodules=True)
+    version("09.90.00", commit="fdbf19d348550d22fef83912d849f1b3a56d94c02ccc08a00cc1c2c087a55f50", submodules=True)
+    # version("09.91.01", sha256="de862df7012f3162aeea3a09e1d6f797f1f98ebc167da34f52f2a203400ea138") tarball doesnt work because of git submodule
+
     version(
         "09.37.02.03", sha256="1d287d1dd3df5c2108154660f9846ce7776a69cb4861d0f89beea69e0c60fbce"
     )
@@ -49,6 +54,7 @@ class Sbncode(CMakePackage):
     patch("v09_37_02_03.patch", when="@09.37.02.03")
     patch("v09_37_01_02.patch", when="@09.37.01.02")
     patch("v09_37_01_03.patch", when="@09.37.01.03")
+    patch("v09_91_01.patch", when="@09.91.01")
 
     variant(
         "cxxstd",
@@ -89,6 +95,9 @@ class Sbncode(CMakePackage):
     depends_on("lardataobj")
     depends_on("lardata")
     depends_on("larevt")
+    depends_on("larrecodnn")# added
+    depends_on("larsoft")# added
+    depends_on("larg4")# added
     depends_on("pandora")
     depends_on("larpandora")
     depends_on("larpandoracontent")
@@ -119,6 +128,12 @@ class Sbncode(CMakePackage):
     depends_on("castxml")
     depends_on("py-pygccxml")
 
+    # depends_on("py-larcv")
+    depends_on("larcv2")
+    depends_on("nusystematics")
+    depends_on("protobuf")
+    depends_on("nusimdata")
+
     if "SPACKDEV_GENERATOR" in os.environ:
         generator = os.environ["SPACKDEV_GENERATOR"]
         if generator.endswith("Ninja"):
@@ -153,12 +168,17 @@ class Sbncode(CMakePackage):
                 self.spec["py-torch"].prefix, self.spec["python"].version.up_to(2)
             ),
             "-DZLIB_ROOT={0}".format(self.spec["zlib"].prefix),
-            "-DIGNORE_ABSOLUTE_TRANSITIVE_DEPENDENCIES=1",
+            #"-DIGNORE_ABSOLUTE_TRANSITIVE_DEPENDENCIES=1",
+            "-DCMAKE_VERBOSE_MAKEFILE=1",
+            "-DCMAKE_RULE_MESSAGES=1",
+            "-DCMAKE_EXPORT_COMPILE_COMMANDS=1"
         ]
         return args
 
     def setup_build_environment(self, spack_env):
         spack_env.prepend_path("LD_LIBRARY_PATH", self.spec["root"].prefix.lib)
+        spack_env.prepend_path("ROOT_X3d", self.spec["root"].prefix.include)
+        spack_env.prepend_path("LD_LIBRARY_PATH", self.spec["larcv2"].prefix.lib)
         # Binaries.
         spack_env.prepend_path("PATH", os.path.join(self.build_directory, "bin"))
         # Ensure we can find plugin libraries.
@@ -169,8 +189,15 @@ class Sbncode(CMakePackage):
         ):
             spack_env.prepend_path("ROOT_INCLUDE_PATH", str(self.spec[d.name].prefix.include))
         spack_env.prepend_path("ROOT_INCLUDE_PATH", self.prefix.include)
+        spack_env.prepend_path("ROOT_LIBRARY_PATH", self.spec["root"].prefix.lib.root)
+        spack_env.prepend_path("ROOT_LIBRARY_PATH", self.spec["nusimdata"].prefix.lib.nusimdata)
+        spack_env.prepend_path("ROOT_INCLUDE_PATH", self.spec["nusimdata"].prefix.include.nusimdata)
+
         # Perl modules.
         spack_env.prepend_path("PERL5LIB", os.path.join(self.build_directory, "perllib"))
+        # Larcv modules
+        spack_env.prepend_path("LARCV_LIBDIR", self.spec["larcv2"].prefix.lib)
+        spack_env.prepend_path("LARCV_INCDIR", self.spec["larcv2"].prefix.include)
         # Cleaup.
         sanitize_environments(spack_env)
 
@@ -184,9 +211,15 @@ class Sbncode(CMakePackage):
             root=False, cover="nodes", order="post", deptype=("link"), direction="children"
         ):
             run_env.prepend_path("ROOT_INCLUDE_PATH", str(self.spec[d.name].prefix.include))
-        run_env.prepend_path("ROOT_INCLUDE_PATH", self.prefix.include)
+            run_env.prepend_path("ROOT_INCLUDE_PATH", self.prefix.include)
+            run_env.prepend_path("ROOT_LIBRARY_PATH", self.spec["root"].prefix.lib.root)
+            # run_env.prepend_path("ROOT_LIBRARY_PATH", self.spec["nusimdata"].prefix.lib.nusimdata)
+            # run_env.prepend_path("ROOT_INCLUDE_PATH", self.spec["nusimdata"].prefix.include.nusimdata)
         # Perl modules.
         run_env.prepend_path("PERL5LIB", os.path.join(self.prefix, "perllib"))
+        # Larcv modules
+        run_env.prepend_path("LARCV_LIBDIR", self.spec["larcv2"].prefix.lib)
+        run_env.prepend_path("LARCV_INCDIR", self.spec["larcv2"].prefix.include)
         # Cleaup.
         sanitize_environments(run_env)
 
@@ -197,7 +230,13 @@ class Sbncode(CMakePackage):
         spack_env.prepend_path("CET_PLUGIN_PATH", self.prefix.lib)
         # Ensure Root can find headers for autoparsing.
         spack_env.prepend_path("ROOT_INCLUDE_PATH", self.prefix.include)
+        spack_env.prepend_path("ROOT_LIBRARY_PATH", self.spec["root"].prefix.lib.root)
+        # spack_env.prepend_path("ROOT_LIBRARY_PATH", self.spec["nusimdata"].prefix.lib.nusimdata)
+        # spack_env.prepend_path("ROOT_INCLUDE_PATH", self.spec["nusimdata"].prefix.include.nusimdata)
         # Perl modules.
         spack_env.prepend_path("PERL5LIB", os.path.join(self.prefix, "perllib"))
+        # Larcv modules
+        spack_env.prepend_path("LARCV_LIBDIR", self.spec["larcv2"].prefix.lib)
+        spack_env.prepend_path("LARCV_INCDIR", self.spec["larcv2"].prefix.include)
         # Cleanup.
         sanitize_environments(spack_env)
diff --git a/packages/sbndaq-artdaq-core/package.py b/packages/sbndaq-artdaq-core/package.py
index b49744b..d6270ad 100644
--- a/packages/sbndaq-artdaq-core/package.py
+++ b/packages/sbndaq-artdaq-core/package.py
@@ -17,6 +17,7 @@ class SbndaqArtdaqCore(CMakePackage):
     list_url = "https://api.github.com/repos/SBNSoftware/sbndaq-artdaq-core/tags"
 
     version("develop", git=git_base, branch="develop", get_full_repo=True)
+    version("1.10.01", sha256="7dd4d1240f3fcde891a2431b1fd1376385dc78ead8cf131443c5a57eef606912")
     version("1.08.00of0", sha256="4b839b28a9ac17b89a3c33f840fb7cd3ae96f13c12ab461794a7dd04b144b024")
     version("1.08.00", sha256="02c5008d8b411f3edd8a67be9ae4f51fba840533693c624981a649679c0e43dd")
     version("1.07.01", sha256="edf3b55215c7b9f034188eeebad33654d938f60073cc568e4ba8f5f23c0515a7")
diff --git a/packages/sbndcode/package.py b/packages/sbndcode/package.py
index d87cd99..88699da 100644
--- a/packages/sbndcode/package.py
+++ b/packages/sbndcode/package.py
@@ -38,11 +38,13 @@ class Sbndcode(CMakePackage):
     git_base = "https://github.com/SBNSoftware/sbndcode.git"
 
     version("develop", branch="develop", git=git_base, get_full_repo=True)
+    version("09.90.00", tag="v09_90_00", git=git_base, get_full_repo=True)
     version("09.32.00", tag="v09_32_00", git=git_base, get_full_repo=True)
     version("09.10.00", tag="v09_10_00", git=git_base, get_full_repo=True)
     version("09.10.01", tag="v09_10_01", git=git_base, get_full_repo=True)
 
     patch("v09_32_00.patch", when="@9.32.00")
+    patch("v09_90_00.patch", when="@9.90.00")
 
     variant(
         "cxxstd",
@@ -103,6 +105,22 @@ class Sbndcode(CMakePackage):
     depends_on("dk2nudata", type=("build", "run"))
     depends_on("sbncode", type=("build", "run"))
 
+    # added for polaris
+    depends_on("larg4", type=("build", "run"))
+    depends_on("larcorealg", type=("build", "run"))
+    depends_on("nuevdb", type=("build", "run"))
+    depends_on("cry", type=("build", "run"))
+    depends_on("dk2nugenie", type=("build", "run"))
+    depends_on("log4cpp", type=("build", "run"))
+    depends_on("rstartree", type=("build", "run"))
+    depends_on("wirecell", type=("build", "run"))
+    depends_on("hdf5", type=("build", "run"))
+    depends_on("hep-hpc", type=("build", "run"))
+    depends_on("genie-xsec", type=("build", "run"))
+    depends_on("nugen", type=("build", "run"))
+    depends_on("larsimdnn", type=("build", "run"))
+    depends_on("sbnd-data", type=("build", "run"))# Made from scratch
+
     if "SPACKDEV_GENERATOR" in os.environ:
         generator = os.environ["SPACKDEV_GENERATOR"]
         if generator.endswith("Ninja"):
@@ -117,6 +135,8 @@ class Sbndcode(CMakePackage):
         # Set CMake args.
         args = [
             "-DCMAKE_CXX_STANDARD={0}".format(self.spec.variants["cxxstd"].value),
+            "-Dsbndcode_FW_DIR=fw",
+            "-Dsbndcode_WP_DIR={0}".format(self.spec["wirecell"].prefix),
             "-DCMAKE_PREFIX_PATH={0}/lib/python{1}/site-packages/torch".format(
                 self.spec["py-torch"].prefix, self.spec["python"].version.up_to(2)
             ),
@@ -126,6 +146,7 @@ class Sbndcode(CMakePackage):
     def setup_build_environment(self, spack_env):
         # Binaries.
         spack_env.prepend_path("PATH", os.path.join(self.build_directory, "bin"))
+        spack_env.prepend_path("SBNDCODE_DIR", str(self.build_directory))
         # Ensure we can find plugin libraries.
         spack_env.prepend_path("CET_PLUGIN_PATH", os.path.join(self.build_directory, "lib"))
         # Ensure Root can find headers for autoparsing.
@@ -135,9 +156,16 @@ class Sbndcode(CMakePackage):
             spack_env.prepend_path("ROOT_INCLUDE_PATH", str(self.spec[d.name].prefix.include))
         # Perl modules.
         spack_env.prepend_path("PERL5LIB", os.path.join(self.build_directory, "perllib"))
+        spack_env.prepend_path("GENIE_INC", str(self.spec["genie"].prefix.include))
+        spack_env.prepend_path("hep_hpc_DIR", str(self.spec["hep-hpc"].prefix))
+        # spack_env.prepend_path("ROOT_INCLUDE_PATH", os.path.join(self.spec["sbndaq-artdaq-core"].prefix, "sbndaq-artdaq-core/Obj/SBND"))
         # Cleaup.
         sanitize_environments(spack_env)
 
+    # def install():
+    #     make()
+    #     make("install")
+
     def setup_run_environment(self, run_env):
         # Binaries.
         run_env.prepend_path("PATH", os.path.join(self.prefix, "bin"))
@@ -151,9 +179,16 @@ class Sbndcode(CMakePackage):
         run_env.prepend_path("ROOT_INCLUDE_PATH", self.prefix.include)
         # Perl modules.
         run_env.prepend_path("PERL5LIB", os.path.join(self.prefix, "perllib"))
+        # sbnd_data path       
+        run_env.prepend_path("FW_SEARCH_PATH", "/grand/neutrinoGPU/software/larsoft/sbnd_data/v01_24_00")
+        # fcl file prefix
+        run_env.prepend_path("FHICL_FILE_PATH", self.prefix.fcl)
+        # Add to wire-cell path
+        run_env.prepend_path("WIRECELL_PATH", os.path.join(self.spec['wirecell'].prefix))#, "pgrapher/experiment/sbnd"
         # Cleaup.
         sanitize_environments(run_env)
 
+
     def setup_dependent_build_environment(self, spack_env, dependent_spec):
         # Binaries.
         spack_env.prepend_path("PATH", self.prefix.bin)
diff --git a/packages/sbnobj/package.py b/packages/sbnobj/package.py
index a2c5ce2..9623d67 100644
--- a/packages/sbnobj/package.py
+++ b/packages/sbnobj/package.py
@@ -48,6 +48,7 @@ class Sbnobj(CMakePackage):
         git=git_base,
         get_full_repo=True,
     )
+    version("09.19.02", sha256="292e37da8f10549d4cdfbfef4743419d974076b4c0333823c9539faa780414bc")
     version("09.12.12", sha256="60f4f1d437cad1b1573c5f56186a48edbeab1431ccdeb0bcbe8d62fc3c7b21b0")
     version("09.12.09", sha256="4905f82711ac35fcdb732500ce1a33cee83f38a66a116d3d30aeeca749ba1313")
     version("09.12.05", tag="v09_12_05", git=git_base, get_full_repo=True)
@@ -63,6 +64,7 @@ class Sbnobj(CMakePackage):
         description="Use the specified C++ standard when building.",
     )
 
+    patch("v09_19_02.patch", when="@09.19.02")
     patch("v09_12_12.patch", when="@09.12.12")
     patch("v09_12_09.patch", when="@09.12.09")
     patch("v09_12_05.patch", when="@09.12.05")
diff --git a/packages/wirecell/boost_spline.patch b/packages/wirecell/boost_spline.patch
deleted file mode 100644
index 32d518a..0000000
--- a/packages/wirecell/boost_spline.patch
+++ /dev/null
@@ -1,24 +0,0 @@
---- spack-src/util/test/test_interpolate.cxx.orig	2021-09-08 14:47:44.584476843 -0500
-+++ spack-src/util/test/test_interpolate.cxx	2021-09-08 15:11:47.536519335 -0500
-@@ -1,10 +1,10 @@
- #include "WireCellUtil/Interpolate.h"
--#include <boost/math/interpolators/cubic_b_spline.hpp>
-+#include <boost/math/interpolators/cardinal_cubic_b_spline.hpp>
- 
- #include <iostream>
- #include <iomanip>
- 
--// https://www.boost.org/doc/libs/1_65_0/libs/math/doc/html/math_toolkit/interpolate/cubic_b.html
-+// https://www.boost.org/doc/libs/1_76_0/libs/math/doc/html/math_toolkit/interpolators/cardinal_cubic_b.html
- 
- using namespace WireCell;
- 
-@@ -13,7 +13,7 @@
-     std::vector<double> f{0.01, -0.02, 0.3, 0.8, 1.9, -8.78, -22.6};
-     const double xstep = 0.01;
-     const double x0 = xstep;
--    boost::math::cubic_b_spline<double> spline(f.begin(), f.end(), x0, xstep);
-+    boost::math::interpolators::cardinal_cubic_b_spline<double> spline(f.begin(), f.end(), x0, xstep);
- 
-     linterp<double> lin(f.begin(), f.end(), x0, xstep);
- 
diff --git a/packages/wirecell/package.py b/packages/wirecell/package.py
deleted file mode 100644
index fc2ba10..0000000
--- a/packages/wirecell/package.py
+++ /dev/null
@@ -1,162 +0,0 @@
-# Copyright 2013-2019 Lawrence Livermore National Security, LLC and other
-# Spack Project Developers. See the top-level COPYRIGHT file for details.
-#
-# SPDX-License-Identifier: (Apache-2.0 OR MIT)
-
-from spack import *
-
-
-def sanitize_environments(*args):
-    for env in args:
-        for var in (
-            "PATH",
-            "CET_PLUGIN_PATH",
-            "LDSHARED",
-            "LD_LIBRARY_PATH",
-            "DYLD_LIBRARY_PATH",
-            "LIBRARY_PATH",
-            "CMAKE_INSTALL_RPATH",
-            "CMAKE_PREFIX_PATH",
-            "ROOT_INCLUDE_PATH",
-        ):
-            env.prune_duplicate_paths(var)
-            env.deprioritize_system_paths(var)
-
-
-class Wirecell(Package):
-    """Wire Cell Toolkit provides simulation, signal processing and reconstruction for LArTPC
-    Borrowed from
-    https://github.com/WireCell/wire-cell-spack/blob/master/repo/packages/wirecell-toolkit/package.py
-    """
-
-    homepage = "https://wirecell.github.io"
-    url = "https://github.com/WireCell/wire-cell-toolkit/archive/refs/tags/0.13.0.tar.gz"
-
-    version("0.27.1", sha256="a8410a9e0524570e811f5cca2ea9fc636e48c048a5e67c5cee567b935515e176")
-    version("0.24.3", sha256="040d819a3a81b953a42c8b4bb898acf6978cee45beea0361a2f3cdb602a6028c")
-    version("0.24.1", sha256="0467a4dff51abac3661aa99c5f3cc5de1ba1607a7f357631a2fbf7dcdf01c8a9")
-    version("0.17.0", sha256="f2807adb83c8c6960ccefe8002bd015d646a96ad181d2092848d2461b3b81eea")
-    version("0.16.0", sha256="af04affc1642c6ea534c479f0e1701e74b43674c2ebc025a117849ac0aba9cee")
-    version("0.14.0", sha256="f7d792ef3c73744b395a6880018a4ba3349f2c5ba2f96399ad1a4d17be8f6092")
-    version("0.13.1", sha256="d9ce092f9ebae91607213b62bf015ac6ac08c33ce97b6fbd67494d42c1f75bdb")
-    version("0.13.0", sha256="eedc7db7ce75d2f7ef1b23461d1a2d780fd8409187eb851ced1e8ab4b7a10d8e")
-    version("0.12.2", sha256="83387ebe6a517353daae69b05e86dd274f66ba80e6b120fb219b5c260c383e21")
-    version("0.11.2", sha256="56b46cad781948e21c36660032de3ca54d5d5fd6b7aa47cdc3d3d4a67770f831")
-    version("0.10.9", sha256="a5a7f2d45c78c18e098f3afc10e6df06b0e94e062870535c927c0fab51e43bd8")
-
-    variant(
-        "cxxstd",
-        default="17",
-        values=("11", "14", "17", "20"),
-        multi=False,
-        description="Use the specified C++ standard when building.",
-    )
-
-    depends_on("jsoncpp")
-    depends_on("jsonnet")
-
-    depends_on("fftw")
-    depends_on("eigen")
-    depends_on("spdlog")
-    depends_on("hdf5")
-    depends_on("h5cpp")
-
-    # Do not currently make use of TBB.  When we get back to this,
-    # probably best to build ROOT with TBB support as well.
-    # depends_on("tbb")
-    depends_on("root@6:")
-
-    # match what is listed in wire-cell-build/wscript
-    depends_on("boost +system+filesystem+graph+thread+program_options+iostreams+stacktrace")
-
-    patch("setprecisionfix.patch", when="@0.14.0")
-    patch("boost_spline.patch", when="@0.14.0")
-
-    def patch(self):
-        with when("@:0.24.3 %gcc@13:"):
-            filter_file(
-                "#include <typeinfo>",
-                "#include <typeinfo>\n#include<cstdint>",
-                "util/inc/WireCellUtil/Dtype.h",
-            )
-
-    def patch(self):
-        with when("@:0.27.1 %gcc@12:"):
-            filter_file(
-                "#include <iomanip>",
-                "#include <iomanip>\n#include<sstream>",
-                "aux/src/Logger.cxx",
-            )
-
-    def install(self, spec, prefix):
-        cxxstd = self.spec.variants["cxxstd"].value
-        cxxstdflag = "" if cxxstd == "default" else getattr(self.compiler, "cxx{0}_flag".format(cxxstd))
-
-        cfg = "wcb"
-        cfg += " --prefix=%s" % prefix
-        cfg += " --boost-mt"
-        cfg += " --boost-libs=%s --boost-includes=%s" % (
-            spec["boost"].prefix.lib,
-            spec["boost"].prefix.include,
-        )
-        cfg += " --with-root=%s" % spec["root"].prefix
-        cfg += " --with-eigen=%s" % spec["eigen"].prefix
-        cfg += " --with-eigen-include=%s" % spec["eigen"].prefix.include.eigen3
-        cfg += " --with-jsoncpp=%s" % spec["jsoncpp"].prefix
-        cfg += " --with-jsonnet=%s" % spec["jsonnet"].prefix
-        cfg += " --with-tbb=%s" % spec["tbb"].prefix
-        # cfg += " --with-tbb=false"  # for now
-        cfg += " --with-fftw=%s" % spec["fftw"].prefix
-        if cxxstdflag:
-            cfg += " --build-debug=" + cxxstdflag
-
-        cfg += " configure"
-        python = which("python")
-        python(*cfg.split())
-        filter_file(r"-std=c\+\+11", cxxstdflag, "build/c4che/_cache.py")
-        python("wcb", "-vv")
-        python("wcb", "install")
-        return
-
-    def setup_build_environment(self, spack_env):
-        cxxstd = self.spec.variants["cxxstd"].value
-        cxxstdflag = "" if cxxstd == "default" else getattr(self.compiler, "cxx{0}_flag".format(cxxstd))
-        spack_env.append_flags("CXXFLAGS", cxxstdflag)
-        # Ensure Root can find headers for autoparsing.
-        for d in self.spec.traverse(
-            root=False,
-            cover="nodes",
-            order="post",
-            deptype=("link"),
-            direction="children",
-        ):
-            spack_env.prepend_path("ROOT_INCLUDE_PATH", str(self.spec[d.name].prefix.include))
-        # Cleanup.
-        sanitize_environments(spack_env)
-
-    def setup_run_environment(self, run_env):
-        run_env.prepend_path("PATH", self.prefix.bin)
-        # Ensure Root can find headers for autoparsing.
-        for d in self.spec.traverse(
-            root=False,
-            cover="nodes",
-            order="post",
-            deptype=("link"),
-            direction="children",
-        ):
-            run_env.prepend_path("ROOT_INCLUDE_PATH", str(self.spec[d.name].prefix.include))
-        run_env.prepend_path("ROOT_INCLUDE_PATH", self.prefix.include)
-        # Cleanup.
-        sanitize_environments(run_env)
-
-    def setup_dependent_build_environment(self, spack_env, dependent_spec):
-        spack_env.prepend_path("ROOT_INCLUDE_PATH", self.prefix.include)
-        # Cleanup.
-        sanitize_environments(spack_env)
-
-    def flag_handler(self, name, flags):
-        if name == "cxxflags" and self.spec.compiler.name == "gcc":
-            flags.append("-Wno-error=deprecated-declarations")
-            flags.append("-Wno-error=class-memaccess")
-            flags.append("-Wno-error=unused-function")
-        return (flags, None, None)
diff --git a/packages/wirecell/setprecisionfix.patch b/packages/wirecell/setprecisionfix.patch
deleted file mode 100644
index 8f5e481..0000000
--- a/packages/wirecell/setprecisionfix.patch
+++ /dev/null
@@ -1,10 +0,0 @@
---- spack-src/util/test/test_interpolate.cxx.orig	2021-09-05 20:49:47.861576962 -0500
-+++ spack-src/util/test/test_interpolate.cxx	2021-09-05 20:50:05.319742885 -0500
-@@ -2,6 +2,7 @@
- #include <boost/math/interpolators/cubic_b_spline.hpp>
- 
- #include <iostream>
-+#include <iomanip>
- 
- // https://www.boost.org/doc/libs/1_65_0/libs/math/doc/html/math_toolkit/interpolate/cubic_b.html
- 
