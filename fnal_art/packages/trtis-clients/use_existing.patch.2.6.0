diff -Naur src/clients/c++/library/cmake/TRTISConfig.cmake.in src/clients/c++/library/cmake/TRTISConfig.cmake.in
--- a/src/clients/c++/library/cmake/TRITONConfig.cmake.in  10:22:34.000000000 -0600
+++ b/src/clients/c++/library/cmake/TRITONConfig.cmake.in  11:41:12.327965857 -0600
@@ -27,7 +27,7 @@
 # specific version required for protobuf
 if(NOT PROTOBUF_FOUND AND NOT Protobuf_FOUND)
   set(protobuf_MODULE_COMPATIBLE TRUE CACHE BOOL "protobuf_MODULE_COMPATIBLE" FORCE)
-  find_package(Protobuf @Protobuf_VERSION@ CONFIG REQUIRED)
+  find_package(Protobuf @Protobuf_VERSION@)
 endif()
 
 # specific version required for grpc
--- /dev/null	2020-12-16 11:40:15.146661301 -0600
+++ spack-src/cmake/modules/oniguruma-config.cmake	2021-02-01 16:37:34.478398504 -0600
@@ -0,0 +1,11 @@
+message("In orniguruma-config.cmake, using pkg_check_modules...")
+include("FindPkgConfig")
+include_guard(GLOBAL)
+pkg_check_modules(pkg_oniguruma oniguruma)
+add_library(oniguruma INTERFACE IMPORTED)
+set_target_properties(oniguruma PROPERTIES
+        INTERFACE_INCLUDE_DIRECTORIES "${PKG_ONIGURUMA_INCLUDE_DIRS}"
+        INTERFACE_LINK_LIBRARIES "${PKG_ONIGURUMA_LIBRARIES}"
+        INTERFACE_COMPILE_OPTIONS "${PKG_ONIGURUMA_CFLAGS_OTHER}")
+SET(ONIGURUMA_FOUND "${PKG_ONIGURUMA_FOUND}")
+SET(ONIGURUMA_VERSION "${PKG_ONIGURUMA_VERSION}")
--- /dev/null	2020-12-16 11:40:15.146661301 -0600
+++ spack-src/cmake/modules/libevent-config.cmake	2021-02-01 16:37:34.478398504 -0600
@@ -0,0 +1,11 @@
+message("In libevent-config.cmake, using pkg_check_modules...")
+include("FindPkgConfig")
+include_guard(GLOBAL)
+pkg_check_modules(pkg_libevent libevent)
+add_library(libevent INTERFACE IMPORTED)
+set_target_properties(libevent PROPERTIES
+        INTERFACE_INCLUDE_DIRECTORIES "${PKG_LIBEVENT_INCLUDE_DIRS}"
+        INTERFACE_LINK_LIBRARIES "${PKG_LIBEVENT_LIBRARIES}"
+        INTERFACE_COMPILE_OPTIONS "${PKG_LIBEVENT_CFLAGS_OTHER}")
+set(LIBEVENT_FOUND "${PKG_LIBEVENT_FOUND}")
+set(LIBEVENT_VERSION "${PKG_LIBEVENT_VERSION}")
--- server-2.6.0/build/CMakeLists.txt	2020-12-17 17:39:05.000000000 -0600
+++ spack-src/build/CMakeLists.txt	2021-02-08 17:12:43.120730206 -0600
@@ -130,9 +130,13 @@
 endif()
 
 
+find_package(protobuf)
+find_package(GTest)
 #
 # Get the protobuf and grpc source
 #
+if((NOT FOUND_PROTOBUF) OR (NOT FOUND_GTest))
+message("Notice: did not find external protobuf or googletest, downloading")
 ExternalProject_Add(grpc-repo
   PREFIX grpc-repo
   GIT_REPOSITORY "https://github.com/grpc/grpc.git"
@@ -143,12 +146,14 @@
   INSTALL_COMMAND ""
   TEST_COMMAND ""
 )
-
+endif()
 #
 # Build protobuf project from grpc-repo
 #
 # Use -DCMAKE_BUILD_TYPE:STRING=RELEASE to workaround the protobuf build issue
 # described in https://stackoverflow.com/a/60218066/2091555
+if(NOT ${FOUND_PROTOBUF})
+message("Notice: did not find external protobuf")
 ExternalProject_Add(protobuf
   PREFIX protobuf
   SOURCE_DIR "${CMAKE_CURRENT_BINARY_DIR}/grpc-repo/src/grpc/third_party/protobuf/cmake"
@@ -162,10 +166,16 @@
     -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/protobuf
   DEPENDS grpc-repo
 )
+else()
+message("Notice: did find external protobuf, adding target")
+add_library(protobuf ALIAS protobuf::libprotobuf)
+endif()
 
 #
 # Build googletest project from grpc-repo
 #
+if(NOT ${FOUND_GTEST})
+message("Notice: did not find external googletest")
 ExternalProject_Add(googletest
   PREFIX protobuf
   SOURCE_DIR "${CMAKE_CURRENT_BINARY_DIR}/grpc-repo/src/grpc/third_party/googletest"
@@ -175,6 +181,10 @@
     -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/googletest
   DEPENDS grpc-repo
 )
+else()
+message("Notice: did find external googletest adding target")
+add_library(googletest ALIAS GTest::gtest)
+endif()
 
 # Location where protobuf-config.cmake will be installed varies by
 # platform
@@ -184,9 +191,13 @@
   set(_FINDPACKAGE_PROTOBUF_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/protobuf/${CMAKE_INSTALL_LIBDIR}/cmake/protobuf")
 endif()
 
+find_package(c-ares)
+
 #
 # Build c-area project from grpc-repo
 #
+if(NOT ${FOUND_C_ARES})
+message("Notice: did not find external c-ares, building..")
 ExternalProject_Add(c-ares
   PREFIX c-ares
   SOURCE_DIR "${CMAKE_CURRENT_BINARY_DIR}/grpc-repo/src/grpc/third_party/cares/cares"
@@ -199,10 +209,15 @@
     -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/c-ares
   DEPENDS grpc-repo
 )
+endif()
 
 #
 # Build GRPC
 #
+find_package(gRPC)
+
+if(NOT ${FOUND_GRPC})
+message("Notice: did not find external gRPC, building..")
 ExternalProject_Add(grpc
   PREFIX grpc
   SOURCE_DIR "${CMAKE_CURRENT_BINARY_DIR}/grpc-repo/src/grpc"
@@ -222,10 +236,17 @@
     -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/grpc
   DEPENDS grpc-repo c-ares protobuf
 )
+else()
+message("Notice: found external gRPC, adding target")
+add_library(grpc ALIAS gRPC::grpc)
+endif()
 
 #
 # Build libcurl
 #
+find_package(CURL)
+if(NOT ${FOUND_CURL})
+message("Notice: did not find external CURL, building")
 ExternalProject_Add(curl
   PREFIX curl
   GIT_REPOSITORY "https://github.com/curl/curl.git"
@@ -240,10 +259,16 @@
     -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
     -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/curl/install
 )
-
+else()
+message("Notice: found external CURL, adding target")
+add_library(curl ALIAS CURL::libcurl)
+endif()
 #
 # Build libevent
 #
+find_package(libevent)
+if(NOT ${FOUND_LIBEVENT})
+message("Notice: did not find external libevent, building")
 ExternalProject_Add(libevent
   PREFIX libevent
   GIT_REPOSITORY "https://github.com/libevent/libevent.git"
@@ -254,10 +277,14 @@
     -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
     -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/libevent/install
 )
+endif()
 
+find_package(libevhtp)
 #
 # Get patched third party repo
 #
+if(NOT FOUND_LIBEVHTP)
+message("Notice: did not find external libevhtp, building")
 ExternalProject_Add(third-party-repo
   PREFIX third-party-repo
   GIT_REPOSITORY "https://github.com/triton-inference-server/third_party.git"
@@ -268,10 +294,12 @@
   INSTALL_COMMAND ""
   TEST_COMMAND ""
 )
+endif()
 
 #
 # Build patched libevhtp
 #
+if(NOT FOUND_LIBEVHTP)
 if (WIN32)
 # FIXME evhtp can't be built successfully in native Windows environment
 # CMAKE_PREFIX_PATH is needed to find libevent
@@ -307,10 +335,14 @@
   DEPENDS libevent third-party-repo
 )
 endif()
+endif()
 
+find_package(prometheus-cpp)
 #
 # Build Prometheus C++ library
 #
+if(NOT FOUND_PROMETHEUS_CPP)
+message("Notice: did not fine external prometheus-cpp")
 ExternalProject_Add(prometheus-cpp
   PREFIX prometheus-cpp
   URL "https://github.com/jupp0r/prometheus-cpp/archive/v0.7.0.tar.gz"
@@ -325,10 +356,14 @@
     -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
     -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/prometheus-cpp/install
 )
+endif()
 
+find_package(Crc32c)
 #
 # Build crc32c
 #
+if(NOT FOUND_CRC32C)
+message("Notice: did not find external crc32c")
 ExternalProject_Add(crc32c
   PREFIX crc32c
   GIT_REPOSITORY "https://github.com/google/crc32c.git"
@@ -341,19 +375,26 @@
     -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
     -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/crc32c
 )
+endif()
 
 # This is necessary because google-cloud-cpp
 # does not pass protobuf_DIR and gRPC_DIR etc to its
 # external projects but expects them in CMAKE_PREFIX_PATH
+if(NOT FOUND_GRPC)
 set(GCS_CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH}
    ${CMAKE_CURRENT_BINARY_DIR}/c-ares/lib/cmake/c-ares
    ${CMAKE_CURRENT_BINARY_DIR}/grpc/lib/cmake/grpc
    ${CMAKE_CURRENT_BINARY_DIR}/crc32c/lib/cmake/Crc32c
    ${_FINDPACKAGE_PROTOBUF_CONFIG_DIR})
+endif()
+
+find_package(google_cloud_cpp_common)
+find_package(google_cloud_cpp_grpc_utils)
 
 #
 # Build google-cloud-cpp
 #
+if(NOT FOUND_GOOGLE-CLOUD-CPP)
 ExternalProject_Add(google-cloud-cpp
   PREFIX google-cloud-cpp
   GIT_REPOSITORY "https://github.com/googleapis/google-cloud-cpp.git"
@@ -367,10 +408,13 @@
     -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/google-cloud-cpp/install
   DEPENDS grpc protobuf crc32c
 )
+endif()
 
+find_package(asure-storage-cpplite)
 #
 # Build azure-storage-cpplite 
 #
+if(NOT FOUND_ASURE_STORAGE_CPPLITE)
 ExternalProject_Add(azure-storage-cpplite
   PREFIX azure-storage-cpplite
   GIT_REPOSITORY "https://github.com/Azure/azure-storage-cpplite.git"
@@ -385,10 +429,15 @@
     -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/azure-storage-cpplite/install
   DEPENDS curl
 )
+endif()
+
 
+if(TRITON_ENABLE_GPU)
+find_package(CNMeM)
 #
 # Build CNMeM (CUDA memeory management library)
 #
+if(NOT FOUND_CNMEM)
 ExternalProject_Add(cnmem
   PREFIX cnmem
   SOURCE_DIR "${CMAKE_CURRENT_BINARY_DIR}/third-party-repo/src/third_party/cnmem/cnmem"
@@ -398,10 +446,14 @@
     -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/cnmem
     DEPENDS third-party-repo
 )
+endif()
+endif()
 
+find_package(aws-sdk-cpp)
 #
 # Build AWS sdk for S3 support
 #
+if( NOT FOUND_AWS_SDK_CPP)
 ExternalProject_Add(aws-sdk-cpp
   PREFIX aws-sdk-cpp
   GIT_REPOSITORY "https://github.com/aws/aws-sdk-cpp.git"
@@ -415,6 +466,7 @@
     -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
     -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/aws-sdk-cpp/install
 )
+endif()
 
 #
 # Build Triton Server test utilities
@@ -486,6 +538,7 @@
   DEPENDS curl protobuf grpc
 )
 
+if(TRITON_ENABLE_SERVER)
 #
 # Build Triton Server library and main executable
 #
@@ -577,5 +630,6 @@
     -DTRITON_VERSION:STRING=${TRITON_VERSION}
   DEPENDS ${TRITON_DEPENDS}
 )
+endif()
 
 unset(CMAKE_INSTALL_PREFIX CACHE)
--- spack-src/build/CMakeLists.txt	2021-02-08 20:30:55.543934543 -0600
+++ spack-src/build/CMakeLists.txt	2021-02-08 20:31:00.829680862 -0600
@@ -483,6 +483,7 @@
   set(TRITON_TEST_UTILS_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
 endif()
 
+if(TRITON_ENABLE_GPU)
 ExternalProject_Add(test-util
   PREFIX test-util
   SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/test-util"
@@ -501,7 +502,7 @@
     -DCMAKE_INSTALL_PREFIX:PATH=${TRITON_TEST_UTILS_INSTALL_PREFIX}
   DEPENDS protobuf googletest cnmem
 )
-
+endif()
 #
 # Build Triton client libraries and examples
 #
--- spack-src/src/clients/c++/library/CMakeLists.txt.orig	2021-02-09 15:58:29.906965608 -0600
+++ spack-src/src/clients/c++/library/CMakeLists.txt	2021-02-09 16:00:08.500245635 -0600
@@ -144,31 +144,30 @@
       ARCHIVE DESTINATION lib
   )
 
-
-  if (NOT WIN32)
-     install(
-         FILES
+#  if (NOT WIN32)
+#     install(
+#         FILES
-         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../c-ares/lib/libcares.a
-         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../grpc/lib/libgpr.a
-         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../grpc/lib/libgrpc.a
-         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../grpc/lib/libgrpc++.a
-         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../grpc/lib/libaddress_sorting.a
-         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../protobuf/lib/libprotobuf.a
-         DESTINATION lib
-     )
-  else()
-     install(
-         FILES
-         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../c-ares/lib/cares.lib
-         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../grpc/lib/gpr.lib
-         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../grpc/lib/grpc.lib
-         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../grpc/lib/grpc++.lib
-         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../grpc/lib/address_sorting.lib
-         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../protobuf/lib/libprotobuf.lib
-         DESTINATION lib
-     )
-  endif() # NOT WIN32
-
+#         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../c-ares/lib/libcares.a
+#         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../grpc/lib/libgpr.a
+#         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../grpc/lib/libgrpc.a
+#         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../grpc/lib/libgrpc++.a
+#         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../grpc/lib/libaddress_sorting.a
+#         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../protobuf/lib/libprotobuf.a
+#         DESTINATION lib
+#     )
+#  else()
+#     install(
+#         FILES
+#         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../c-ares/lib/cares.lib
+#         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../grpc/lib/gpr.lib
+#         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../grpc/lib/grpc.lib
+#         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../grpc/lib/grpc++.lib
+#         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../grpc/lib/address_sorting.lib
+#         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../protobuf/lib/libprotobuf.lib
+#         DESTINATION lib
+#     )
+#  endif() # NOT WIN32
+#
   set(TRITON_CLIENT_HEADER_FLAT 1)
   configure_file(grpc_client.h.in grpc_client_flat.h @ONLY)
 
@@ -194,12 +193,12 @@
       DESTINATION include
   )
 
-  install(
-      DIRECTORY
-      ${CMAKE_CURRENT_BINARY_DIR}/../../../../../protobuf/include/
-      ${CMAKE_CURRENT_BINARY_DIR}/../../../../../grpc/include/
-      DESTINATION include
-  )
+#  install(
+#      DIRECTORY
+#      ${CMAKE_CURRENT_BINARY_DIR}/../../../../../protobuf/include/
+#      ${CMAKE_CURRENT_BINARY_DIR}/../../../../../grpc/include/
+#      DESTINATION include
+#  )
 
 endif() # TRITON_ENABLE_GRPC
 
@@ -312,19 +311,19 @@
   set(TRITON_CLIENT_HEADER_FLAT 1)
   configure_file(http_client.h.in http_client_flat.h @ONLY)
 
-  if (NOT WIN32)
-     install(
-         FILES
-         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../curl/install/lib/libcurl.a
-         DESTINATION lib
-     )
-  else()
-     install(
-         FILES
-         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../curl/install/lib/libcurl.lib
-         DESTINATION lib
-     )
-  endif() # NOT WIN32
+#  if (NOT WIN32)
+#     install(
+#         FILES
+#         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../curl/install/lib/libcurl.a
+#         DESTINATION lib
+#     )
+#  else()
+#     install(
+#         FILES
+#         ${CMAKE_CURRENT_BINARY_DIR}/../../../../../curl/install/lib/libcurl.lib
+#         DESTINATION lib
+#     )
+#  endif() # NOT WIN32
 
   install(
       FILES
