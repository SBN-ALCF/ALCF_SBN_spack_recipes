--- spack-src/src/test/CMakeLists.txt.orig	2021-02-04 11:05:19.136655933 -0600
+++ spack-src/src/test/CMakeLists.txt	2021-02-04 11:05:09.727105093 -0600
@@ -47,6 +47,7 @@
 #
 # CudaMemoryManger
 #
+if(${TRITON_ENABLE_GPU})
 set(
   CUDA_MEMORY_MANAGER_SRCS
   ../core/cuda_memory_manager.cc
@@ -60,6 +61,7 @@
   ../core/status.h
   ../core/cuda_utils.h
 )
+endif()
 
 #
 # PinnedMemoryManger
--- spack-src/src/clients/c++/library/http_client.cc.orig	2021-02-04 12:39:40.750497621 -0600
+++ spack-src/src/clients/c++/library/http_client.cc	2021-02-04 12:39:44.644311769 -0600
@@ -1313,7 +1313,7 @@
   }
 
   const long buffer_byte_size = 16 * 1024 * 1024;
-  curl_easy_setopt(curl, CURLOPT_UPLOAD_BUFFERSIZE, buffer_byte_size);
+  //curl_easy_setopt(curl, CURLOPT_UPLOAD_BUFFERSIZE, buffer_byte_size);
   curl_easy_setopt(curl, CURLOPT_BUFFERSIZE, buffer_byte_size);
 
   // request data provided by InferRequestProvider()
--- spack-src/src/clients/c++/perf_analyzer/CMakeLists.txt.orig	2021-02-09 13:43:51.523818278 -0600
+++ spack-src/src/clients/c++/perf_analyzer/CMakeLists.txt	2021-02-09 13:43:53.356730522 -0600
@@ -58,6 +58,11 @@
   inference_profiler.h
 )
 
+include(FindPkgConfig)
+pkg_check_modules(libb64 REQUIRED libb64)
+include_directories(${LIBB64_INCLUDES})
+link_directories(${LIBB64_LIBRARY_DIRS})
+
 add_executable(
   perf_analyzer
   ${PERF_ANALYZER_SRCS}
--- spack-src/build/client/CMakeLists.txt.orig	2021-05-01 01:23:07.615300000 +0000
+++ spack-src/build/client/CMakeLists.txt	2021-05-03 15:13:47.233815000 +0000
@@ -42,7 +42,7 @@
   set(CMAKE_CXX_FLAGS_DEBUG "-g")
   set(CMAKE_CXX_FLAGS_RELEASE "-O3")
 endif()
-set(CMAKE_CXX_STANDARD 11)
+set(CMAKE_CXX_STANDARD 17)
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
 include_directories("${PROJECT_SOURCE_DIR}/../..")
--- spack-src/src/clients/c++/perf_analyzer/client_backend/CMakeLists.txt.orig	2021-05-01 01:23:07.616300000 +0000
+++ spack-src/src/clients/c++/perf_analyzer/client_backend/CMakeLists.txt	2021-05-03 15:16:04.378575000 +0000
@@ -26,6 +26,9 @@
 
 cmake_minimum_required (VERSION 3.18)
 
+include_directories(${LIBB64_INCLUDES})
+link_directories(${LIBB64_LIBRARY_DIRS})
+
 if(${TRITON_CURL_WITHOUT_CONFIG})
   find_package(CURL REQUIRED)
 else()
