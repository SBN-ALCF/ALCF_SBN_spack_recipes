diff --git a/sbnanaobj/StandardRecord/Proxy/EpilogFwd.h b/sbnanaobj/StandardRecord/Proxy/EpilogFwd.h
index 1163653..24a2525 100644
--- a/sbnanaobj/StandardRecord/Proxy/EpilogFwd.h
+++ b/sbnanaobj/StandardRecord/Proxy/EpilogFwd.h
@@ -1,4 +1,6 @@
 namespace caf{
   using SRSliceProxy = caf::Proxy<caf::SRSlice>;
   using SRSpillProxy = caf::Proxy<caf::StandardRecord>;
+  using SRInteractionDLPProxy = caf::Proxy<caf::SRInteractionDLP>;
+  using SRInteractionTruthDLPProxy = caf::Proxy<caf::SRInteractionTruthDLP>;
 }
diff --git a/sbnanaobj/StandardRecord/SRInteractionDLP.cxx b/sbnanaobj/StandardRecord/SRInteractionDLP.cxx
new file mode 100644
index 0000000..3950b83
--- /dev/null
+++ b/sbnanaobj/StandardRecord/SRInteractionDLP.cxx
@@ -0,0 +1,44 @@
+/**
+ * @file SRInteractionDLP.cxx
+ * @brief Implementation of the SRInteractionDLP class.
+ * @author mueller@fnal.gov
+*/
+#include <limits>
+#include <vector>
+#include "sbnanaobj/StandardRecord/SRInteractionDLP.h"
+
+namespace caf
+{
+    SRInteractionDLP::SRInteractionDLP():
+        cathode_offset(std::numeric_limits<double>::signaling_NaN()),
+	    depositions_sum(std::numeric_limits<float>::signaling_NaN()),
+        flash_hypo_pe(std::numeric_limits<double>::signaling_NaN()),
+        flash_ids(std::vector<int64_t>()),
+        flash_scores(std::vector<float>()),
+        flash_times(std::vector<float>()),
+        flash_total_pe(std::numeric_limits<double>::signaling_NaN()),
+        flash_volume_ids(std::vector<int64_t>()),
+        id(std::numeric_limits<int64_t>::signaling_NaN()),
+        is_cathode_crosser(false),
+        is_contained(true),
+        is_fiducial(true),
+        is_flash_matched(false),
+        is_matched(false),
+        is_truth(false),
+        match_ids(std::vector<int64_t>()),
+        match_overlaps(std::vector<float>()),
+        module_ids(std::vector<int64_t>()),
+        num_particles(std::numeric_limits<int64_t>::signaling_NaN()),
+        num_primary_particles(std::numeric_limits<int64_t>::signaling_NaN()),
+        particle_counts{std::numeric_limits<int64_t>::signaling_NaN(), std::numeric_limits<int64_t>::signaling_NaN(), std::numeric_limits<int64_t>::signaling_NaN()},
+        particle_ids(std::vector<int64_t>()),
+        primary_particle_counts{std::numeric_limits<int64_t>::signaling_NaN(), std::numeric_limits<int64_t>::signaling_NaN(), std::numeric_limits<int64_t>::signaling_NaN()},
+        primary_particle_ids(std::vector<int64_t>()),
+        size(std::numeric_limits<int64_t>::signaling_NaN()),
+        topology(),
+        units(),
+        vertex{std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN()},
+        particles(std::vector<SRParticleDLP>()) { }
+
+    SRInteractionDLP::~SRInteractionDLP() { }
+} // namespace caf
diff --git a/sbnanaobj/StandardRecord/SRInteractionDLP.h b/sbnanaobj/StandardRecord/SRInteractionDLP.h
new file mode 100644
index 0000000..0caec26
--- /dev/null
+++ b/sbnanaobj/StandardRecord/SRInteractionDLP.h
@@ -0,0 +1,64 @@
+/**
+ * @file SRInteractionDLP.h
+ * @brief Definition of the SRInteractionDLP class.
+ * @author mueller@fnal.gov 
+*/
+#ifndef SRINTERACTIONDLP_H
+#define SRINTERACTIONDLP_H
+
+#include <vector>
+#include <stdint.h>
+#include "SRParticleDLP.h"
+
+#if defined(__castxml_major__) && !defined(__clang__)
+#else
+# include <string>
+#endif
+
+namespace caf
+{
+    /**
+     * @brief The SRInteractionDLP class is a representation of an interaction
+     * as defined/reconstructed by the SPINE (Deep Learn Physics)
+     * reconstruction. It encapsulates reconstructed information about the
+     * interaction itself and some high-level information about the particles
+     * in the interaction.
+    */
+    class SRInteractionDLP
+    {
+        public:
+        SRInteractionDLP();
+        ~SRInteractionDLP();
+
+        double cathode_offset;                              //!< Distance from the cathode.
+	    float depositions_sum;                              //!< TO DO.
+        double flash_hypo_pe;                               //!< Total PE of the hypothesized flash.
+        std::vector<int64_t> flash_ids;                     //!< Flash IDs for the matched flashes.
+        std::vector<float> flash_scores;                    //!< Score of the matched flashes.
+        std::vector<float> flash_times;                     //!< Time of the matched flashes.
+        double flash_total_pe;                              //!< Total PE of the matched flash.
+        std::vector<int64_t> flash_volume_ids;              //!< Volume IDs of the matched flashes.
+        int64_t id;                                         //!< Interaction ID.
+        bool is_cathode_crosser;                            //!< Whether the interaction is a cathode-crosser.
+        bool is_contained;                                  //!< Whether the interaction is contained.
+        bool is_fiducial;                                   //!< Whether the interaction has an interaction in the fiducial volume.
+        bool is_flash_matched;                              //!< Whether the flash is matched to the interaction.
+        bool is_matched;                                    //!< Whether the interaction is matched to a true interaction.
+        bool is_truth;                                      //!< Whether the interaction is a truth interaction.
+        std::vector<int64_t> match_ids;                     //!< Interaction IDs of the considered matches (correspond to true interactions).
+        std::vector<float> match_overlaps;                  //!< Intersection over union (IoU) of the considered matches.
+        std::vector<int64_t> module_ids;                    //!< Module IDs of the interaction.
+	    int64_t num_particles;                              //!< The number of particles in the interaction.
+        int64_t num_primary_particles;                      //!< The number of primary particles in the interaction.
+	    int64_t particle_counts[6];                         //!< The number of particles of each type in the interaction.
+        std::vector<int64_t> particle_ids;                  //!< Particle IDs in the interaction.
+        int64_t primary_particle_counts[6];                 //!< The number of primary particles of each type in the interaction.
+        std::vector<int64_t> primary_particle_ids;          //!< Primary particle IDs in the interaction.
+        int64_t size;                                       //!< The size of the interaction (number of voxels).
+        std::string topology;                               //!< Topology of the interaction (e.g. "0g0e1mu0pi2p") considering only primaries.
+        std::string units;                                  //!< Units in which the position coordinates are expressed.
+	    float vertex[3];                                    //!< Vertex of the interaction in detector coordinates.
+        std::vector<SRParticleDLP> particles;               //!< Particles in the interaction.
+  };
+} // namespace caf
+#endif // SRINTERACTIONDLP_H
diff --git a/sbnanaobj/StandardRecord/SRInteractionTruthDLP.cxx b/sbnanaobj/StandardRecord/SRInteractionTruthDLP.cxx
new file mode 100644
index 0000000..78537f3
--- /dev/null
+++ b/sbnanaobj/StandardRecord/SRInteractionTruthDLP.cxx
@@ -0,0 +1,75 @@
+/**
+ * @file SRInteractionTruthDLP.cxx
+ * @brief Implementation of the SRInteractionTruthDLP class.
+ * @author mueller@fnal.gov
+*/
+#include <limits>
+#include <vector>
+#include "sbnanaobj/StandardRecord/SRInteractionTruthDLP.h"
+
+namespace caf
+{
+    SRInteractionTruthDLP::SRInteractionTruthDLP():
+        bjorken_x(std::numeric_limits<double>::signaling_NaN()),
+        cathode_offset(std::numeric_limits<double>::signaling_NaN()),
+        creation_process(),
+        current_type(std::numeric_limits<int64_t>::signaling_NaN()),
+        depositions_adapt_q_sum(std::numeric_limits<double>::signaling_NaN()),
+        depositions_adapt_sum(std::numeric_limits<double>::signaling_NaN()),
+        depositions_g4_sum(std::numeric_limits<int64_t>::signaling_NaN()),
+        depositions_q_sum(std::numeric_limits<double>::signaling_NaN()),
+        depositions_sum(std::numeric_limits<double>::signaling_NaN()),
+        energy_init(std::numeric_limits<double>::signaling_NaN()),
+        energy_transfer(std::numeric_limits<double>::signaling_NaN()),
+        flash_hypo_pe(std::numeric_limits<double>::signaling_NaN()),
+        flash_ids(std::vector<int64_t>()),
+        flash_scores(std::vector<float>()),
+        flash_times(std::vector<float>()),
+        flash_total_pe(std::numeric_limits<double>::signaling_NaN()),
+        flash_volume_ids(std::vector<int64_t>()),
+        hadronic_invariant_mass(std::numeric_limits<double>::signaling_NaN()),
+        id(std::numeric_limits<int64_t>::signaling_NaN()),
+        inelasticity(std::numeric_limits<double>::signaling_NaN()),
+        interaction_id(std::numeric_limits<int64_t>::signaling_NaN()),
+        interaction_mode(std::numeric_limits<int64_t>::signaling_NaN()),
+        interaction_type(std::numeric_limits<int64_t>::signaling_NaN()),
+        is_cathode_crosser(false),
+        is_contained(false),
+        is_fiducial(false),
+        is_flash_matched(false),
+        is_matched(false),
+        is_truth(false),
+        lepton_p(std::numeric_limits<double>::signaling_NaN()),
+        lepton_pdg_code(std::numeric_limits<int64_t>::signaling_NaN()),
+        lepton_track_id(std::numeric_limits<int64_t>::signaling_NaN()),
+        mct_index(std::numeric_limits<int64_t>::signaling_NaN()),
+        module_ids(std::vector<int64_t>()),
+        momentum{std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN()},
+        momentum_transfer(std::numeric_limits<double>::signaling_NaN()),
+        momentum_transfer_mag(std::numeric_limits<double>::signaling_NaN()),
+        nu_id(std::numeric_limits<int64_t>::signaling_NaN()),
+        nucleon(std::numeric_limits<int64_t>::signaling_NaN()),
+        num_particles(std::numeric_limits<int64_t>::signaling_NaN()),
+        num_primary_particles(std::numeric_limits<int64_t>::signaling_NaN()),
+        orig_id(std::numeric_limits<int64_t>::signaling_NaN()),
+        particle_counts{std::numeric_limits<int64_t>::signaling_NaN(), std::numeric_limits<int64_t>::signaling_NaN(), std::numeric_limits<int64_t>::signaling_NaN()},
+        particle_ids(),
+        pdg_code(std::numeric_limits<int64_t>::signaling_NaN()),
+        position{std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN()},
+        primary_particle_counts{std::numeric_limits<int64_t>::signaling_NaN(), std::numeric_limits<int64_t>::signaling_NaN(), std::numeric_limits<int64_t>::signaling_NaN()},
+        primary_particle_ids(),
+        quark(std::numeric_limits<int64_t>::signaling_NaN()),
+        reco_vertex{std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN()},
+        size(std::numeric_limits<int64_t>::signaling_NaN()),
+        size_adapt(std::numeric_limits<int64_t>::signaling_NaN()),
+        size_g4(std::numeric_limits<int64_t>::signaling_NaN()),
+        target(std::numeric_limits<int64_t>::signaling_NaN()),
+        theta(std::numeric_limits<double>::signaling_NaN()),
+        topology(),
+        track_id(std::numeric_limits<int64_t>::signaling_NaN()),
+        units(),
+        vertex{std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN()},
+        particles(std::vector<SRParticleTruthDLP>()) { }
+
+    SRInteractionTruthDLP::~SRInteractionTruthDLP() { }
+} // namespace caf
diff --git a/sbnanaobj/StandardRecord/SRInteractionTruthDLP.h b/sbnanaobj/StandardRecord/SRInteractionTruthDLP.h
new file mode 100644
index 0000000..e2f6709
--- /dev/null
+++ b/sbnanaobj/StandardRecord/SRInteractionTruthDLP.h
@@ -0,0 +1,98 @@
+/**
+ * @file SRInteractionTruthDLP.h
+ * @brief Definition of the SRInteractionTruthDLP class.
+ * @author mueller@fnal.gov
+*/
+#ifndef SRINTERACTIONTRUTHDLP_H
+#define SRINTERACTIONTRUTHDLP_H
+
+#include <vector>
+#include <stdint.h>
+#include "SRParticleTruthDLP.h"
+
+#if defined(__castxml_major__) && !defined(__clang__)
+#else
+# include <string>
+#endif
+
+namespace caf
+{
+    /**
+     * @brief The SRInteractionTruthDLP is a representation of the truth
+     * information associated with an interaction as defined by the SPINE
+     * (Deep Learn Physics) reconstruction. It encapsulates truth information
+     * about the interaction itself and some high-level information about the
+     * particles in the interaction.
+    */
+    class SRInteractionTruthDLP
+    {
+        public:
+        SRInteractionTruthDLP();
+        ~SRInteractionTruthDLP();
+
+        double bjorken_x;                                   //!< Bjorken x of the neutrino interaction.
+        double cathode_offset;                              //!< Distance from the cathode.
+        std::string creation_process;                       //!< Creation process of the neutrino.
+        int64_t current_type;                               //!< Current type of the neutrino.
+        float depositions_adapt_q_sum;                      //!< Total tagged (reco non-ghost) charge deposited [ADC].
+        float depositions_adapt_sum;                        //!< Total tagged (reco non-ghost) energy deposited [MeV].
+        int64_t depositions_g4_sum;                         //!< Total energy deposited energy at the G4 level [MeV].
+        float depositions_q_sum;                            //!< Total tagged (true non-ghost) charge deposited [ADC].
+        float depositions_sum;                              //!< Total tagged (true non-ghost) energy deposited [MeV].
+        double distance_travel;                             //!< Distance traveled by the neutrino from production to the interaction.
+        double energy_init;                                 //!< Initial energy of the neutrino.
+        double energy_transfer;                             //!< Energy transfer (Q0) of the neutrino interaction.
+        double flash_hypo_pe;                               //!< Total PE of the hypothesized flash.
+        std::vector<int64_t> flash_ids;                     //!< Flash ID for the matched flashes.
+        std::vector<float> flash_scores;                    //!< Flash score for the matched flashes.
+        std::vector<float> flash_times;                     //!< Time of the matched flashes.
+        double flash_total_pe;                              //!< Total PE of the matched flash.
+        std::vector<int64_t> flash_volume_ids;              //!< Volume IDs of the matched flashes.
+        double hadronic_invariant_mass;                     //!< Hadronic invariant mass of the neutrino.
+        int64_t id;                                         //!< Interaction ID.
+        double inelasticity;                                //!< Inelasticity of the neutrino interaction.
+        int64_t interaction_id;                             //!< Deprecated.
+        int64_t interaction_mode;                           //!< Interaction mode of the neutrino.
+        int64_t interaction_type;                           //!< Interaction type of the neutrino.
+        bool is_cathode_crosser;                            //!< Whether the interaction is a cathode-crosser.
+        bool is_contained;                                  //!< Whether the interaction is contained.
+        bool is_fiducial;                                   //!< Whether the interaction has an interaction in the fiducial volume.
+        bool is_flash_matched;                              //!< Whether the flash is matched to the interaction.
+        bool is_matched;                                    //!< Whether the interaction is matched to a true interaction.
+        bool is_truth;                                      //!< Whether the interaction is a truth interaction.
+        double lepton_p;                                    //!< Momentum of the lepton in the interaction.
+        int64_t lepton_pdg_code;                            //!< PDG code of the lepton in the interaction.
+        int64_t lepton_track_id;                            //!< Track ID of the lepton in the neutrino interaction.
+        std::vector<int64_t> match_ids;                     //!< Interaction IDs of the considered matches (correspond to true interactions).
+        std::vector<float> match_overlaps;                  //!< Intersection over union (IoU) of the considered matches.
+        int64_t mct_index;                                  //!< Index of the neutrino in the original MCTruth array.
+        std::vector<int64_t> module_ids;                    //!< Module IDs of the interaction.
+	    float momentum[3];                                  //!< Momentum (vector) of the neutrino.
+        double momentum_transfer;                           //!< Momentum transfer (Q^2) of the neutrino interaction.
+        double momentum_transfer_mag;                       //!< Momentum transfer (Q3) of the neutrino interaction.
+        int64_t nu_id;                                      //!< Neutrino ID (-1 = not a neutrino, 0 = first neutrino, 1 = second neutrino, etc.).
+        int64_t nucleon;                                    //!< Nucleon in the neutrino interaction.
+	    int64_t num_particles;                              //!< Number of particles in the interaction.
+        int64_t num_primary_particles;                      //!< Number of primary particles in the interaction.
+        int64_t orig_id;                                    //!< Original ID of the interaction.
+	    int64_t particle_counts[6];                         //!< Number of particles of each type in the interaction.
+        std::vector<int64_t> particle_ids;                  //!< Particle IDs in the interaction.
+        int64_t pdg_code;                                   //!< PDG code of the neutrino.
+        float position[3];                                  //!< Position of the neutrino interaction.
+        int64_t primary_particle_counts[6];                 //!< Number of primary particles of each type in the interaction.
+        std::vector<int64_t> primary_particle_ids;          //!< Primary particle IDs in the interaction.
+        int64_t quark;                                      //!< Quark in the neutrino interaction.
+        float reco_vertex[3];                               //!< Vertex of the interaction in detector coordinates (reco).
+        int64_t size;                                       //!< Number of true non-ghost true-tagged space points.
+        int64_t size_adapt;                                 //!< Number of reco non-ghost true-tagged space points.
+        int64_t size_g4;                                    //!< Number of (rasterized) g4 energy depositions (no detector effects).
+        int64_t target;                                     //!< Target in the neutrino interaction.
+        double theta;                                       //!< Angle of the neutrino interaction.
+        std::string topology;                               //!< Topology of the interaction (e.g. "0g0e1mu0pi2p") considering only primaries.
+        int64_t track_id;                                   //!< Track ID of the neutrino interaction.
+        std::string units;                                  //!< Units in which the position coordinates are expressed.
+        float vertex[3];                                    //!< Vertex of the interaction in detector coordinates (truth).
+        std::vector<SRParticleTruthDLP> particles;          //!< Particles in the interaction.
+  };
+} // namespace caf
+#endif // SRINTERACTIONTRUTHDLP_H
diff --git a/sbnanaobj/StandardRecord/SRParticleDLP.cxx b/sbnanaobj/StandardRecord/SRParticleDLP.cxx
new file mode 100644
index 0000000..f486606
--- /dev/null
+++ b/sbnanaobj/StandardRecord/SRParticleDLP.cxx
@@ -0,0 +1,60 @@
+/**
+ * @file SRParticleDLP.cxx
+ * @brief Implementation of the SRParticleDLP class.
+ * @author mueller@fnal.gov
+*/
+#include <limits>
+#include <vector>
+#include "SRParticleDLP.h"
+#include "SREnums.h"
+
+namespace caf
+{
+    SRParticleDLP::SRParticleDLP():
+        axial_spread(std::numeric_limits<float>::signaling_NaN()),
+        calo_ke(std::numeric_limits<double>::signaling_NaN()),
+        cathode_offset(std::numeric_limits<double>::signaling_NaN()),
+        chi2_per_pid{std::numeric_limits<double>::signaling_NaN(), std::numeric_limits<double>::signaling_NaN(), std::numeric_limits<double>::signaling_NaN(), std::numeric_limits<double>::signaling_NaN(), std::numeric_limits<double>::signaling_NaN(), std::numeric_limits<double>::signaling_NaN()},
+        chi2_pid(std::numeric_limits<int64_t>::signaling_NaN()),
+        csda_ke(std::numeric_limits<double>::signaling_NaN()),
+        csda_ke_per_pid{std::numeric_limits<double>::signaling_NaN(), std::numeric_limits<double>::signaling_NaN(), std::numeric_limits<double>::signaling_NaN(), std::numeric_limits<double>::signaling_NaN(), std::numeric_limits<double>::signaling_NaN(), std::numeric_limits<double>::signaling_NaN()},
+	    depositions_sum(std::numeric_limits<float>::signaling_NaN()),
+        directional_spread(std::numeric_limits<float>::signaling_NaN()),
+        end_dir{std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN()},
+        end_point{std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN()},
+        fragment_ids(),
+        id(std::numeric_limits<int64_t>::signaling_NaN()),
+        interaction_id(std::numeric_limits<int64_t>::signaling_NaN()),
+        is_cathode_crosser(false),
+        is_contained(false),
+        is_matched(false),    
+        is_primary(false),
+        is_truth(false),
+        is_valid(false),
+        ke(std::numeric_limits<double>::signaling_NaN()),
+        length(std::numeric_limits<double>::signaling_NaN()),
+        mass(std::numeric_limits<double>::signaling_NaN()),
+        match_ids(),
+        match_overlaps(),
+        mcs_ke(std::numeric_limits<double>::signaling_NaN()),
+        mcs_ke_per_pid{std::numeric_limits<double>::signaling_NaN(), std::numeric_limits<double>::signaling_NaN(), std::numeric_limits<double>::signaling_NaN(), std::numeric_limits<double>::signaling_NaN(), std::numeric_limits<double>::signaling_NaN(), std::numeric_limits<double>::signaling_NaN()},
+        module_ids(),
+        momentum{std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN()},
+        num_fragments(std::numeric_limits<int64_t>::signaling_NaN()),
+        p(std::numeric_limits<float>::signaling_NaN()),
+        pdg_code(std::numeric_limits<int64_t>::signaling_NaN()),
+        pid((int64_t)-1),
+        pid_scores(),
+        ppn_ids(),
+        primary_scores(),
+        shape((int64_t)-1),
+        size(std::numeric_limits<int64_t>::signaling_NaN()),
+        start_dedx(std::numeric_limits<double>::signaling_NaN()),
+        start_dir{std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN()},
+        start_point{std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN()},
+        start_straightness(std::numeric_limits<float>::signaling_NaN()),
+        units(),
+        vertex_distance(std::numeric_limits<double>::signaling_NaN()) { }
+
+    SRParticleDLP::~SRParticleDLP() { }
+} // namespace caf
diff --git a/sbnanaobj/StandardRecord/SRParticleDLP.h b/sbnanaobj/StandardRecord/SRParticleDLP.h
new file mode 100644
index 0000000..22ff4e2
--- /dev/null
+++ b/sbnanaobj/StandardRecord/SRParticleDLP.h
@@ -0,0 +1,77 @@
+/**
+ * @file SRParticleDLP.h
+ * @brief Definition of the SRParticleDLP class.
+ * @author mueller@fnal.gov
+*/
+#ifndef SRPARTICLEDLP_H
+#define SRPARTICLEDLP_H
+
+#include <vector>
+#include <stdint.h>
+
+#if defined(__castxml_major__) && !defined(__clang__)
+#else
+# include <string>
+#endif
+
+namespace caf
+{
+    /**
+     * @brief The SRParticleDLP class is a representation of an particle
+     * as defined/reconstructed by the SPINE (Deep Learn Physics)
+     * reconstruction. It encapsulates reconstructed information about a single
+     * particle.
+    */
+    class SRParticleDLP
+    {
+        public:
+        SRParticleDLP();
+        ~SRParticleDLP();
+
+        float axial_spread;                                 //!< Axial spread of the particle.
+        double calo_ke;                                     //!< Calorimetric kinetic energy.
+        double cathode_offset;                              //!< Distance from the cathode.
+        double chi2_per_pid[6];                             //!< Chi2 score per PID hypothesis.
+        int64_t chi2_pid;                                   //!< PID from the chi2-based PID.
+        double csda_ke;                                     //!< Continuous-slowing-down-approximation kinetic energy.
+        double csda_ke_per_pid[6];                          //!< CSDA kinetic energy per PID.
+        float depositions_sum;                              //!< TO DO.
+        float directional_spread;                           //!< Directional spread of the particle.
+        float end_dir[3];                                   //!< Unit direction vector calculated at the particle end point.
+        float end_point[3];                                 //!< End point (vector) of the particle.
+        std::vector<int32_t> fragment_ids;                  //!< Fragment IDs comprising the particle.
+        int64_t id;                                         //!< Particle ID.
+        int64_t interaction_id;                             //!< Parent interaction ID.
+        bool is_cathode_crosser;                            //!< Whether the particle is a cathode-crosser.
+        bool is_contained;                                  //!< Whether the particle is contained.
+        bool is_matched;                                    //!< Whether the particle is matched.
+        bool is_primary;                                    //!< Whether the particle is a primary particle.
+        bool is_truth;                                      //!< Whether the particle is a truth particle.
+        bool is_valid;                                      //!< Whether the particle passes thresholds and counts towards the topology.
+        double ke;                                          //!< Kinetic energy from best energy estimator (CSDA, calorimetric, or MCS).
+        double length;                                      //!< Length of the particle.
+	    double mass;                                        //!< Mass of the particle (according to assigned PID).
+        std::vector<int64_t> match_ids;                     //!< Match ID.
+        std::vector<float> match_overlaps;                  //!< Match overlap.
+        double mcs_ke;                                      //!< Multiple Coulomb scattering kinetic energy.
+        double mcs_ke_per_pid[6];                           //!< MCS kinetic energy per PID.
+        std::vector<int64_t> module_ids;                    //!< Module IDs of the particle.
+        float momentum[3];                                  //!< Momentum (vector) of the particle.
+        int64_t num_fragments;                              //!< TO DO.
+        float p;                                            //!< Momentum magnitude.
+        int64_t pdg_code;                                   //!< PDG code of the particle.
+        int64_t pid;                                        //!< Particle ID (see Pid_t enumeration).
+	    float pid_scores[6];                                //!< PID softmax scores.
+        std::vector<int32_t> ppn_ids;                       //!< PPN IDs of the particle.
+	    float primary_scores[2];                            //!< Primary softmax scores
+        int64_t shape;                                      //!< Semantic type of the particle (see Shape_t enumeration).
+        int64_t size;                                       //!< TO DO.
+        double start_dedx;                                 //!< dE/dx at the start of the particle.
+        float start_dir[3];                                 //!< Unit direction vector calculated at the particle start point.
+        float start_point[3];                               //!< Start point (vector) of the particle.
+        float start_straightness;                           //!< Straightness at the start of the particle.
+        std::string units;                                  //!< Units in which the position coordinates are expressed.
+        double vertex_distance;                             //!< Distance from the vertex.
+  };
+} // namespace caf
+#endif // SRPARTICLEDLP_H
diff --git a/sbnanaobj/StandardRecord/SRParticleTruthDLP.cxx b/sbnanaobj/StandardRecord/SRParticleTruthDLP.cxx
new file mode 100644
index 0000000..a345f86
--- /dev/null
+++ b/sbnanaobj/StandardRecord/SRParticleTruthDLP.cxx
@@ -0,0 +1,97 @@
+/**
+ * @file SRParticleTruthDLP.cxx
+ * @brief Implementation of the SRParticleTruthDLP class.
+ * @author mueller@fnal.gov
+ */
+#include <limits>
+#include <vector>
+#include "SRParticleTruthDLP.h"
+
+namespace caf
+{
+    SRParticleTruthDLP::SRParticleTruthDLP():
+        ancestor_creation_process(),
+        ancestor_pdg_code(std::numeric_limits<int64_t>::signaling_NaN()),
+        ancestor_position{std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN()},
+        ancestor_t(std::numeric_limits<double>::signaling_NaN()),
+        ancestor_track_id(std::numeric_limits<int64_t>::signaling_NaN()),
+        calo_ke(-1.0),
+        cathode_offset(std::numeric_limits<double>::signaling_NaN()),
+        children_counts(std::vector<int64_t>()),
+        children_id(std::vector<int64_t>()),
+        csda_ke(std::numeric_limits<double>::signaling_NaN()),
+        csda_ke_per_pid{std::numeric_limits<double>::signaling_NaN(), std::numeric_limits<double>::signaling_NaN(), std::numeric_limits<double>::signaling_NaN(), std::numeric_limits<double>::signaling_NaN(), std::numeric_limits<double>::signaling_NaN(), std::numeric_limits<double>::signaling_NaN()},
+        depositions_adapt_q_sum(std::numeric_limits<float>::signaling_NaN()),
+        depositions_adapt_sum(std::numeric_limits<float>::signaling_NaN()),
+        depositions_g4_sum(std::numeric_limits<int64_t>::signaling_NaN()),
+        depositions_q_sum(std::numeric_limits<float>::signaling_NaN()),
+        depositions_sum(std::numeric_limits<float>::signaling_NaN()),
+        distance_travel(std::numeric_limits<double>::signaling_NaN()),
+        end_dir{std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN()},
+        end_momentum{std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN()},
+        end_p(std::numeric_limits<float>::signaling_NaN()),
+        end_point{std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN()},
+        end_position{std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN()},
+        end_t(std::numeric_limits<double>::signaling_NaN()),
+        energy_deposit(std::numeric_limits<double>::signaling_NaN()),
+        energy_init(std::numeric_limits<double>::signaling_NaN()),
+        first_step{std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN()},
+        fragment_ids(std::vector<int32_t>()),
+        group_id(std::numeric_limits<int64_t>::signaling_NaN()),
+        group_primary(std::numeric_limits<int64_t>::signaling_NaN()),
+        id(std::numeric_limits<int64_t>::signaling_NaN()),
+        interaction_id(std::numeric_limits<int64_t>::signaling_NaN()),
+        interaction_primary(std::numeric_limits<int64_t>::signaling_NaN()),
+        is_cathode_crosser(false),
+        is_contained(false),
+        is_matched(false),
+        is_primary(false),
+        is_truth(false),
+        is_valid(false),
+        ke(std::numeric_limits<double>::signaling_NaN()),
+        last_step{std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN()},
+        length(std::numeric_limits<double>::signaling_NaN()),
+        mass(std::numeric_limits<double>::signaling_NaN()),
+        match_ids(std::vector<int64_t>()),
+        match_overlaps(std::vector<float>()),
+        mcs_ke(std::numeric_limits<double>::signaling_NaN()),
+        mcs_ke_per_pid{std::numeric_limits<double>::signaling_NaN(), std::numeric_limits<double>::signaling_NaN(), std::numeric_limits<double>::signaling_NaN(), std::numeric_limits<double>::signaling_NaN(), std::numeric_limits<double>::signaling_NaN(), std::numeric_limits<double>::signaling_NaN()},
+        mcst_index(std::numeric_limits<int64_t>::signaling_NaN()),
+        mct_index(std::numeric_limits<int64_t>::signaling_NaN()),
+        module_ids(std::vector<int64_t>()),
+        momentum{std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN()},
+        nu_id(std::numeric_limits<int64_t>::signaling_NaN()),
+        num_fragments(std::numeric_limits<int64_t>::signaling_NaN()),
+        num_voxels(std::numeric_limits<int64_t>::signaling_NaN()),
+        orig_children_id(std::vector<int64_t>()),
+        orig_group_id(std::numeric_limits<int64_t>::signaling_NaN()),
+        orig_id(std::numeric_limits<int64_t>::signaling_NaN()),
+        orig_interaction_id(std::numeric_limits<int64_t>::signaling_NaN()),
+        orig_parent_id(std::numeric_limits<int64_t>::signaling_NaN()),
+        p(std::numeric_limits<double>::signaling_NaN()),
+        parent_creation_process(),
+        parent_id(std::numeric_limits<int64_t>::signaling_NaN()),
+        parent_pdg_code(std::numeric_limits<int64_t>::signaling_NaN()),
+        parent_position{std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN()},
+        parent_t(std::numeric_limits<double>::signaling_NaN()),
+        parent_track_id(std::numeric_limits<int64_t>::signaling_NaN()),
+        pdg_code(std::numeric_limits<int64_t>::signaling_NaN()),
+        pid((int64_t)-1),
+        position{std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN()},
+        reco_end_dir{std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN()},
+        reco_ke(std::numeric_limits<double>::signaling_NaN()),
+        reco_length(std::numeric_limits<double>::signaling_NaN()),
+        reco_momentum{std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN()},
+        reco_start_dir{std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN()},
+        shape((int64_t)-1),
+        size(std::numeric_limits<int64_t>::signaling_NaN()),
+        size_adapt(std::numeric_limits<int64_t>::signaling_NaN()),
+        size_g4(std::numeric_limits<int64_t>::signaling_NaN()),
+        start_dir{std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN()},
+        start_point{std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN(), std::numeric_limits<float>::signaling_NaN()},
+        t(std::numeric_limits<double>::signaling_NaN()),
+        track_id(std::numeric_limits<int64_t>::signaling_NaN()),
+        units() { }
+
+    SRParticleTruthDLP::~SRParticleTruthDLP() { }
+} // namespace caf
\ No newline at end of file
diff --git a/sbnanaobj/StandardRecord/SRParticleTruthDLP.h b/sbnanaobj/StandardRecord/SRParticleTruthDLP.h
new file mode 100644
index 0000000..b6e9076
--- /dev/null
+++ b/sbnanaobj/StandardRecord/SRParticleTruthDLP.h
@@ -0,0 +1,117 @@
+/**
+ * @file SRParticleTruthDLP.h
+ * @brief Definition of the SRParticleTruthDLP class.
+ * @author mueller@fnal.gov
+*/
+#ifndef SRPARTICLETRUTHDLP_H
+#define SRPARTICLETRUTHDLP_H
+
+#include <vector>
+#include <stdint.h>
+
+#if defined(__castxml_major__) && !defined(__clang__)
+#else
+# include <string>
+#endif
+
+namespace caf
+{
+    /**
+    * @brief The SRParticleTruthDLP class is a representation of the truth 
+    * information associated with a particle as defined by the SPINE (Deep
+    * Learn Physics) reconstruction. It encapsulates truth information about
+    * the particle itself and some high-level information about the particle's
+    * ancestry and children.
+    */
+    class SRParticleTruthDLP
+    {
+        public:
+        SRParticleTruthDLP();
+        ~SRParticleTruthDLP();
+        
+        std::string ancestor_creation_process;         //!< Geant4 creation process of the ancestor particle.
+        int64_t ancestor_pdg_code;                     //!< PDG code of the ancestor particle.
+        float ancestor_position[3];                    //!< Position of the ancestor particle.
+        double ancestor_t;                             //!< Time of the ancestor particle.
+        int64_t ancestor_track_id;                     //!< Track ID of the ancestor particle.
+        double calo_ke;                                //!< Calorimetric kinetic energy.
+        double cathode_offset;                         //!< Distance from the cathode.
+        std::vector<int64_t> children_counts;          //!< Number of children of the particle.
+        std::vector<int64_t> children_id;              //!< List of particle ID of children particles.
+        std::string creation_process;                  //!< Geant4 creation process of the particle.
+        double csda_ke;                                //!< Continuous-slowing-down-approximation kinetic energy.
+        double csda_ke_per_pid[6];                     //!< CSDA kinetic energy per PID.
+        float depositions_adapt_q_sum;                 //!< Total tagged (reco non-ghost) charge deposited [ADC].
+        float depositions_adapt_sum;                   //!< Total tagged (reco non-ghost) energy deposited [MeV].
+        int64_t depositions_g4_sum;                    //!< Total energy deposited energy at the G4 level [MeV].
+        float depositions_q_sum;                       //!< Total tagged (true non-ghost) charge deposited [ADC].
+        float depositions_sum;                         //!< Total tagged (true non-ghost) energy deposited [MeV].
+        double distance_travel;                        //!< Distance traveled by the neutrino from production to the interaction.
+        float end_dir[3];                              //!< Unit direction vector calculated at the particle end point.
+        float end_momentum[3];                         //!< Momentum (vector) of the particle at the end.
+        float end_p;                                   //!< Momentum magnitude of the particle at the end.
+        float end_point[3];                            //!< End point (vector) of the particle.
+        float end_position[3];                         //!< End position (vector) of the particle.
+        double end_t;                                  //!< TO DO.
+        double energy_deposit;                         //!< Energy deposited by the particle.
+        double energy_init;                            //!< Initial energy of the particle. 
+        float first_step[3];                           //!< Coordinates of the first step of the particle.
+        std::vector<int32_t> fragment_ids;             //!< Fragment IDs comprising the particle.
+        int64_t group_id;                              //!< Group ID of the particle.
+        int64_t group_primary;                         //!< Whether the particle is a primary within its group.
+        int64_t id;                                    //!< Particle ID.
+        int64_t interaction_id;                        //!< Parent interaction ID.
+        int64_t interaction_primary;                   //!< Whether the particle is a primary within its interaction (equivalent to is_primary).
+        bool is_cathode_crosser;                       //!< Whether the particle is a cathode-crosser.
+        bool is_contained;                             //!< Whether the particle is contained.
+        bool is_matched;                               //!< Whether the particle is matched.
+        bool is_primary;                               //!< Whether the particle is a primary particle.
+        bool is_truth;                                 //!< Whether the particle is a truth particle.
+        bool is_valid;                                 //!< Whether the particle passes thresholds and counts towards topology.
+        double ke;                                     //!< Kinetic energy from best energy estimator (CSDA, calorimetric, or MCS). 
+        float last_step[3];                            //!< Coordinates of the last step of the particle.
+        double length;                                 //!< Length of the particle.
+        double mass;                                   //!< Mass of the particle.
+        std::vector<int64_t> match_ids;                //!< Particle match IDs.
+        std::vector<float> match_overlaps;             //!< Particle match overlaps.
+        double mcs_ke;                                 //!< Multiple Coulomb scattering kinetic energy.
+        double mcs_ke_per_pid[6];                      //!< MCS kinetic energy per PID.
+        int64_t mcst_index;                            //!< MCST index.
+        int64_t mct_index;                             //!< Index of the particle in the original MCTruth array.
+        std::vector<int64_t> module_ids;               //!< Module IDs of the particle. 
+        float momentum[3];                             //!< Momentum (vector) of the particle.
+        int64_t nu_id;                                 //!< Neutrino ID (-1 = not a neutrino, 0 = first neutrino, 1 = second neutrino, etc.).
+        int64_t num_fragments;                         //!< Number of particle fragments.
+        int64_t num_voxels;                            //!< Number of voxels comprising the particle.
+        std::vector<int64_t> orig_children_id;         //!< Original ID of the children particles.
+        int64_t orig_group_id;                         //!< Original group ID of the particle.
+        int64_t orig_id;                               //!< Original ID of the particle.
+        int64_t orig_interaction_id;                   //!< Interaction ID as it was stored in the parent LArCV file under the interaction_id attribute.
+        int64_t orig_parent_id;                        //!< Parent ID as it was stored in the parent LArCV file under the parent_id attribute.
+        double p;                                      //!< Momentum magnitude.
+        std::string parent_creation_process;           //!< Geant4 creation process of the parent particle.
+        int64_t parent_id;                             //!< Parent particle ID.
+        int64_t parent_pdg_code;                       //!< PDG code of the parent particle. 
+        float parent_position[3];                      //!< Position of the parent particle.
+        double parent_t;                               //!< Time of the parent particle.
+        double parent_track_id;                        //!< Track ID of the parent particle.
+        int64_t pdg_code;                              //!< PDG code of the particle.
+        int64_t pid;                                   //!< Particle ID (see Pid enumeration).
+        float position[3];                             //!< Position of the particle.
+        float reco_end_dir[3];                         //!< TO DO.
+        double reco_ke;                                //!< TO DO.
+        double reco_length;                            //!< TO DO.
+        double reco_momentum[3];                       //!< TO DO.
+        float reco_start_dir[3];                       //!< TO DO.
+        int64_t shape;                                 //!< Semantic type of the particle (see SemanticType enumeration).
+        int64_t size;                                  //!< TO DO.
+        int64_t size_adapt;                            //!< TO DO.
+        int64_t size_g4;                               //!< TO DO.
+        float start_dir[3];                            //!< Unit direction vector calculated at the particle start point.
+        float start_point[3];                          //!< Start point (vector) of the particle.
+        double t;                                      //!< Time of the particle.
+        int64_t track_id;                              //!< Track ID of the particle.
+        std::string units;                             //!< Units in which the position coordinates are expressed.
+    };
+} // namespace caf
+#endif // SRPARTICLETRUTHDLP_H
\ No newline at end of file
diff --git a/sbnanaobj/StandardRecord/StandardRecord.h b/sbnanaobj/StandardRecord/StandardRecord.h
index c08f6d6..0616eda 100644
--- a/sbnanaobj/StandardRecord/StandardRecord.h
+++ b/sbnanaobj/StandardRecord/StandardRecord.h
@@ -18,6 +18,8 @@
 #include "sbnanaobj/StandardRecord/SRTruthBranch.h"
 #include "sbnanaobj/StandardRecord/SRFakeReco.h"
 #include "sbnanaobj/StandardRecord/SROpFlash.h"
+#include "sbnanaobj/StandardRecord/SRInteractionDLP.h"
+#include "sbnanaobj/StandardRecord/SRInteractionTruthDLP.h"
 
 /// Common Analysis Files
 namespace caf
@@ -59,6 +61,10 @@ namespace caf
     std::vector<SRCRTPMTMatch> crtpmt_matches;  ///< CRT-PMT matches in event 
     bool pass_flashtrig;     ///< Whether this Record passed the Flash Trigger requirement
 
+    int                                ndlp;       ///< Number of reco DLP (ML) interactions.
+    std::vector<SRInteractionDLP>      dlp;        ///< Reco DLP (ML) interactions.  
+    int                                ndlp_true;  ///< Number of true DLP (ML) interactions.
+    std::vector<SRInteractionTruthDLP> dlp_true;   ///< True DLP (ML) interactions.
   };
 
 } // end namespace
diff --git a/sbnanaobj/StandardRecord/classes_def.xml b/sbnanaobj/StandardRecord/classes_def.xml
index 0e725c7..436a688 100644
--- a/sbnanaobj/StandardRecord/classes_def.xml
+++ b/sbnanaobj/StandardRecord/classes_def.xml
@@ -5,7 +5,8 @@
 <!-- art::Wrappers for these products are defined in CAFMaker -->
 
 <lcgdict>
-  <class name="caf::StandardRecord" ClassVersion="13">
+  <class name="caf::StandardRecord" ClassVersion="14">
+   <version ClassVersion="14" checksum="390457353"/>
    <version ClassVersion="13" checksum="1979816256"/>
    <version ClassVersion="12" checksum="3984422068"/>
    <version ClassVersion="11" checksum="483883398"/>
